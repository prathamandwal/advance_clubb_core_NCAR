
Begin optimization report for: DTRSM..0

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dtrsm.f(263,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(264,18)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(264,18)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dtrsm.f(264,18)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(265,19) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dtrsm.f(264,18)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(279,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(281,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(281,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(281,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(281,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(285,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(288,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(288,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(289,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(288,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(289,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(288,34)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(295,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(297,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(297,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(297,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(297,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(301,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(304,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(304,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(305,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(304,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(305,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(304,34)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(316,22)
   remark #15301: OUTER LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 50 
   remark #15477: vector loop cost: 19.250 
   remark #15478: estimated potential speedup: 2.580 
   remark #15479: lightweight vector operations: 22 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at dtrsm.f(317,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between b line 320 and b line 323
      remark #15346: vector dependence: assumed FLOW dependence between b line 323 and b line 320

      LOOP BEGIN at dtrsm.f(319,30)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtrsm.f(320,31) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(316,22)
<Remainder>

   LOOP BEGIN at dtrsm.f(317,26)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at dtrsm.f(319,30)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(327,22)
   remark #15301: OUTER LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 50 
   remark #15477: vector loop cost: 19.250 
   remark #15478: estimated potential speedup: 2.580 
   remark #15479: lightweight vector operations: 22 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at dtrsm.f(328,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between b line 331 and b line 334

      LOOP BEGIN at dtrsm.f(330,30)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtrsm.f(331,31) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(327,22)
<Remainder>

   LOOP BEGIN at dtrsm.f(328,26)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at dtrsm.f(330,30)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(345,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(347,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(347,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(347,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(347,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(351,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(353,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(353,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(354,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(353,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(354,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(353,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(366,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(368,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(368,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(368,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(368,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(372,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(374,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(374,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(375,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(374,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(375,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(374,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(392,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(395,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(395,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(395,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(395,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(399,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(402,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(402,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(403,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(402,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(403,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(402,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(414,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(417,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(417,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(417,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(417,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(421,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(424,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(424,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(425,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(424,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(425,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(424,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DTRSM..1

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dtrsm.f(263,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(264,18)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(264,18)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dtrsm.f(264,18)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(265,19) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dtrsm.f(264,18)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(279,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(281,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(281,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(281,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(281,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(285,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(288,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(288,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(289,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(288,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(289,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(288,34)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(295,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(297,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(297,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(297,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(297,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(301,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(304,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(304,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(305,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(304,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(305,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(304,34)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(316,22)
   remark #15301: OUTER LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 50 
   remark #15477: vector loop cost: 19.250 
   remark #15478: estimated potential speedup: 2.590 
   remark #15479: lightweight vector operations: 22 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at dtrsm.f(317,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between b line 320 and b line 323
      remark #15346: vector dependence: assumed FLOW dependence between b line 323 and b line 320

      LOOP BEGIN at dtrsm.f(319,30)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtrsm.f(320,31) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(316,22)
<Remainder>

   LOOP BEGIN at dtrsm.f(317,26)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at dtrsm.f(319,30)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(327,22)
   remark #15301: OUTER LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 50 
   remark #15477: vector loop cost: 19.250 
   remark #15478: estimated potential speedup: 2.590 
   remark #15479: lightweight vector operations: 22 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at dtrsm.f(328,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between b line 331 and b line 334

      LOOP BEGIN at dtrsm.f(330,30)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtrsm.f(331,31) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(327,22)
<Remainder>

   LOOP BEGIN at dtrsm.f(328,26)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at dtrsm.f(330,30)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(345,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(347,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(347,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(347,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(347,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(351,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(353,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(353,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(354,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(353,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(354,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(353,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(366,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(368,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(368,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(368,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(368,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(372,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(374,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(374,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(375,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(374,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(375,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(374,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(392,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(395,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(395,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(395,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(395,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(399,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(402,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(402,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(403,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(402,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(403,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(402,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(414,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(417,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(417,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(417,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(417,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(421,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(424,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(424,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(425,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(424,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(425,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(424,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DGBTF2

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgbtf2.f(215,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbtf2.f(216,13)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgbtf2.f(216,13)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgbtf2.f(216,13)
         remark #15388: vectorization support: reference ab has aligned access   [ dgbtf2.f(217,13) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgbtf2.f(216,13)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgbtf2.f(231,16)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbtf2.f(231,16)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dgbtf2.f(231,16)
      remark #15388: vectorization support: reference ab has aligned access   [ dgbtf2.f(232,16) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dgbtf2.f(231,16)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dgbtf2.f(240,15)
   remark #15385: vectorization support: unsupported reduction    [ idamax.f(85,28) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(85,28) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dgbtf2.f(240,15)
<Remainder>
LOOP END

LOOP BEGIN at dswap.f(85,13) inlined into dgbtf2.f(248,16)
   remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(86,16) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15315: loop was not vectorized: low trip count
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 9.500 
   remark #15478: estimated potential speedup: 0.680 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(85,13) inlined into dgbtf2.f(248,16)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(93,10) inlined into dgbtf2.f(248,16)
   remark #25427: Loop Statements Reordered
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 6 
   remark #15462: unmasked indexed (or gather) loads: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 32 
   remark #15477: vector loop cost: 40.500 
   remark #15478: estimated potential speedup: 0.780 
   remark #15479: lightweight vector operations: 24 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtf2.f(248,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between DX line 114 and DX line 115
   remark #15346: vector dependence: assumed FLOW dependence between DX line 115 and DX line 114
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtf2.f(248,16)
<Remainder>
LOOP END

LOOP BEGIN at dscal.f(87,13) inlined into dgbtf2.f(255,21)
   remark #15389: vectorization support: reference DX has unaligned access   [ dscal.f(88,16) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ dscal.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(87,13) inlined into dgbtf2.f(255,21)
<Remainder>
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dgbtf2.f(255,21)
<Peeled>
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dgbtf2.f(255,21)
   remark #15388: vectorization support: reference DX has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference DX has aligned access   [ dscal.f(94,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 4.040 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dgbtf2.f(255,21)
<Remainder>
   remark #15388: vectorization support: reference DX has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference DX has aligned access   [ dscal.f(94,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dgbtf2.f(255,21)
<Remainder>
LOOP END

LOOP BEGIN at dger.f(195,14) inlined into dgbtf2.f(260,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dger.f(198,22) inlined into dgbtf2.f(260,19)
   <Peeled>
   LOOP END

   LOOP BEGIN at dger.f(198,22) inlined into dgbtf2.f(260,19)
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15389: vectorization support: reference X has unaligned access   [ dger.f(199,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dger.f(198,22) inlined into dgbtf2.f(260,19)
   <Remainder>
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15389: vectorization support: reference X has unaligned access   [ dger.f(199,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dger.f(198,22) inlined into dgbtf2.f(260,19)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at dgbtf2.f(226,10)
   remark #15529: loop was not vectorized: volatile assignment was not vectorized. Try using non-volatile assignment.   [ dger.f(131,18) ]
LOOP END
===========================================================================

Begin optimization report for: DGBEQU

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgbequ.f(226,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbequ.f(226,10)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dgbequ.f(226,10)
      remark #15388: vectorization support: reference r has aligned access   [ dgbequ.f(227,10) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dgbequ.f(226,10)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at dgbequ.f(233,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dgbequ.f(234,13) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbequ.f(234,13)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgbequ.f(234,13)
      remark #15388: vectorization support: reference r has aligned access   [ dgbequ.f(235,13) ]
      remark #15388: vectorization support: reference r has aligned access   [ dgbequ.f(235,13) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dgbequ.f(235,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 13 
      remark #15477: vector loop cost: 12.000 
      remark #15478: estimated potential speedup: 3.770 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbequ.f(234,13)
   <Remainder>
      remark #15388: vectorization support: reference r has aligned access   [ dgbequ.f(235,13) ]
      remark #15388: vectorization support: reference r has aligned access   [ dgbequ.f(235,13) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dgbequ.f(235,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgbequ.f(234,13)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbequ.f(243,10)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbequ.f(244,10) ]
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at dgbequ.f(243,10)
<Remainder>
LOOP END

LOOP BEGIN at dgbequ.f(253,13)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at dgbequ.f(263,13)
<Peeled>
LOOP END

LOOP BEGIN at dgbequ.f(263,13)
   remark #15388: vectorization support: reference r has aligned access   [ dgbequ.f(264,13) ]
   remark #15388: vectorization support: reference r has aligned access   [ dgbequ.f(264,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 41 
   remark #15477: vector loop cost: 39.000 
   remark #15478: estimated potential speedup: 3.700 
   remark #15479: lightweight vector operations: 9 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbequ.f(263,13)
<Remainder>
   remark #15388: vectorization support: reference r has aligned access   [ dgbequ.f(264,13) ]
   remark #15388: vectorization support: reference r has aligned access   [ dgbequ.f(264,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgbequ.f(263,13)
<Remainder>
LOOP END

LOOP BEGIN at dgbequ.f(274,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbequ.f(274,10)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dgbequ.f(274,10)
      remark #15388: vectorization support: reference c has aligned access   [ dgbequ.f(275,10) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dgbequ.f(274,10)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at dgbequ.f(282,10)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dgbequ.f(283,13) ]
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ dgbequ.f(283,13) ]

   LOOP BEGIN at dgbequ.f(283,13)
      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ dgbequ.f(284,13) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbequ.f(284,13) ]
   LOOP END
LOOP END

LOOP BEGIN at dgbequ.f(292,10)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbequ.f(293,10) ]
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at dgbequ.f(292,10)
<Remainder>
LOOP END

LOOP BEGIN at dgbequ.f(301,13)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at dgbequ.f(311,13)
<Peeled>
LOOP END

LOOP BEGIN at dgbequ.f(311,13)
   remark #15388: vectorization support: reference c has aligned access   [ dgbequ.f(312,13) ]
   remark #15388: vectorization support: reference c has aligned access   [ dgbequ.f(312,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 41 
   remark #15477: vector loop cost: 39.000 
   remark #15478: estimated potential speedup: 3.700 
   remark #15479: lightweight vector operations: 9 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbequ.f(311,13)
<Remainder>
   remark #15388: vectorization support: reference c has aligned access   [ dgbequ.f(312,13) ]
   remark #15388: vectorization support: reference c has aligned access   [ dgbequ.f(312,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgbequ.f(311,13)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: DGBRFS

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dcopy.f(84,13) inlined into dgbrfs.f(325,15)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=6

   LOOP BEGIN at dcopy.f(84,13) inlined into dgbrfs.f(325,15)
   <Multiversioned v2>
      remark #15389: vectorization support: reference DY has unaligned access   [ dcopy.f(85,16) ]
      remark #15389: vectorization support: reference DX has unaligned access   [ dcopy.f(85,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.800 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at dcopy.f(84,13) inlined into dgbrfs.f(325,15)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(90,10) inlined into dgbrfs.f(325,15)
   remark #25264: Loop rerolled by 7 
   remark #25402: memmove generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dcopy.f(90,10) inlined into dgbrfs.f(325,15)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgbrfs.f(325,15)
   <Multiversioned v2>
      remark #15388: vectorization support: reference DY has aligned access   [ dcopy.f(91,13) ]
      remark #15389: vectorization support: reference DX has unaligned access   [ dcopy.f(91,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.250 
      remark #15478: estimated potential speedup: 1.720 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgbrfs.f(325,15)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dgbmv.f(314,18) inlined into dgbrfs.f(326,15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbmv.f(318,26) inlined into dgbrfs.f(326,15)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgbmv.f(318,26) inlined into dgbrfs.f(326,15)
      remark #15388: vectorization support: reference Y has aligned access   [ dgbmv.f(319,27) ]
      remark #15388: vectorization support: reference Y has aligned access   [ dgbmv.f(319,27) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dgbmv.f(319,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbmv.f(318,26) inlined into dgbrfs.f(326,15)
   <Remainder>
      remark #15388: vectorization support: reference Y has aligned access   [ dgbmv.f(319,27) ]
      remark #15388: vectorization support: reference Y has aligned access   [ dgbmv.f(319,27) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dgbmv.f(319,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgbmv.f(318,26) inlined into dgbrfs.f(326,15)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbmv.f(345,18) inlined into dgbrfs.f(326,15)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dgbmv.f(348,22) ]
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ dgbmv.f(348,22) ]

   LOOP BEGIN at dgbmv.f(348,22) inlined into dgbrfs.f(326,15)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbmv.f(349,23) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dgbmv.f(348,22) inlined into dgbrfs.f(326,15)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbrfs.f(338,13)
<Peeled>
LOOP END

LOOP BEGIN at dgbrfs.f(338,13)
   remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(339,13) ]
   remark #15389: vectorization support: reference b has unaligned access   [ dgbrfs.f(339,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 8 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 2.890 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbrfs.f(338,13)
<Remainder>
   remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(339,13) ]
   remark #15389: vectorization support: reference b has unaligned access   [ dgbrfs.f(339,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgbrfs.f(338,13)
<Remainder>
LOOP END

LOOP BEGIN at dgbrfs.f(345,16)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dgbrfs.f(348,19) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbrfs.f(348,19)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgbrfs.f(348,19)
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(349,19) ]
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(349,19) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dgbrfs.f(349,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 13 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.300 
      remark #15479: lightweight vector operations: 7 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbrfs.f(348,19)
   <Remainder>
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(349,19) ]
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(349,19) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dgbrfs.f(349,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgbrfs.f(348,19)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbrfs.f(353,16)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dgbrfs.f(356,19) ]
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ dgbrfs.f(356,19) ]

   LOOP BEGIN at dgbrfs.f(356,19)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbrfs.f(357,19) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dgbrfs.f(356,19)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbrfs.f(363,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between s line 367 and s line 365
   remark #15346: vector dependence: assumed ANTI dependence between s line 365 and s line 367
   remark #15346: vector dependence: assumed ANTI dependence between s line 365 and s line 365
   remark #15346: vector dependence: assumed FLOW dependence between s line 365 and s line 365
   remark #15346: vector dependence: assumed FLOW dependence between s line 365 and s line 365
   remark #15346: vector dependence: assumed ANTI dependence between s line 365 and s line 365
   remark #15346: vector dependence: assumed ANTI dependence between s line 365 and s line 367
   remark #15346: vector dependence: assumed FLOW dependence between s line 367 and s line 365
LOOP END

LOOP BEGIN at daxpy.f(87,13) inlined into dgbrfs.f(386,18)
   remark #15389: vectorization support: reference DY has unaligned access   [ daxpy.f(88,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ daxpy.f(88,16) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ daxpy.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15315: loop was not vectorized: low trip count
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 0.660 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at daxpy.f(87,13) inlined into dgbrfs.f(386,18)
<Remainder>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at daxpy.f(93,10) inlined into dgbrfs.f(386,18)
<Peeled>
LOOP END

LOOP BEGIN at daxpy.f(93,10) inlined into dgbrfs.f(386,18)
   remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
   remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ daxpy.f(94,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 11.000 
   remark #15478: estimated potential speedup: 2.050 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at daxpy.f(93,10) inlined into dgbrfs.f(386,18)
<Remainder>
   remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
   remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ daxpy.f(94,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at daxpy.f(93,10) inlined into dgbrfs.f(386,18)
<Remainder>
LOOP END

LOOP BEGIN at dgbrfs.f(414,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between work line 416 and work line 418
   remark #15346: vector dependence: assumed ANTI dependence between work line 418 and work line 416
LOOP END

LOOP BEGIN at dgbrfs.f(426,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbrfs.f(433,19)
   <Peeled, Multiversioned v1>
   LOOP END

   LOOP BEGIN at dgbrfs.f(433,19)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(434,19) ]
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(434,19) ]
      remark #15389: vectorization support: reference work has unaligned access   [ dgbrfs.f(434,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.050 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbrfs.f(433,19)
   <Remainder, Multiversioned v1>
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(434,19) ]
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(434,19) ]
      remark #15389: vectorization support: reference work has unaligned access   [ dgbrfs.f(434,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgbrfs.f(433,19)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at dgbrfs.f(433,19)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dgbrfs.f(433,19)
   <Multiversioned v2>
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(434,19) ]
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(434,19) ]
      remark #15389: vectorization support: reference work has unaligned access   [ dgbrfs.f(434,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.050 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbrfs.f(433,19)
   <Remainder, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dgbrfs.f(440,19)
   <Peeled, Multiversioned v1>
   LOOP END

   LOOP BEGIN at dgbrfs.f(440,19)
   <Multiversioned v1>
      remark #25228: Loop multiversioned for Data Dependence
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(441,19) ]
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(441,19) ]
      remark #15389: vectorization support: reference work has unaligned access   [ dgbrfs.f(441,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.050 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbrfs.f(440,19)
   <Remainder, Multiversioned v1>
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(441,19) ]
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(441,19) ]
      remark #15389: vectorization support: reference work has unaligned access   [ dgbrfs.f(441,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgbrfs.f(440,19)
   <Remainder, Multiversioned v1>
   LOOP END

   LOOP BEGIN at dgbrfs.f(440,19)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dgbrfs.f(440,19)
   <Multiversioned v2>
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(441,19) ]
      remark #15388: vectorization support: reference work has aligned access   [ dgbrfs.f(441,19) ]
      remark #15389: vectorization support: reference work has unaligned access   [ dgbrfs.f(441,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.050 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbrfs.f(440,19)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dgbrfs.f(452,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbrfs.f(453,13) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dgbrfs.f(452,13)
<Remainder>
LOOP END

LOOP BEGIN at dgbrfs.f(291,13)
<Peeled>
LOOP END

LOOP BEGIN at dgbrfs.f(291,13)
   remark #15389: vectorization support: reference ferr has unaligned access   [ dgbrfs.f(292,13) ]
   remark #15388: vectorization support: reference berr has aligned access   [ dgbrfs.f(293,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 1.900 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbrfs.f(291,13)
<Remainder>
   remark #15389: vectorization support: reference ferr has unaligned access   [ dgbrfs.f(292,13) ]
   remark #15388: vectorization support: reference berr has aligned access   [ dgbrfs.f(293,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgbrfs.f(291,13)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at dgbrfs.f(314,10)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at dgbrfs.f(388,13)
      remark #15529: loop was not vectorized: volatile assignment was not vectorized. Try using non-volatile assignment.   [ dgbmv.f(186,18) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DGBTRS

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dswap.f(85,13) inlined into dgbtrs.f(226,19)
   remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(86,16) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15315: loop was not vectorized: low trip count
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 9.500 
   remark #15478: estimated potential speedup: 0.680 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(85,13) inlined into dgbtrs.f(226,19)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(93,10) inlined into dgbtrs.f(226,19)
   remark #25427: Loop Statements Reordered
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 6 
   remark #15462: unmasked indexed (or gather) loads: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 32 
   remark #15477: vector loop cost: 40.500 
   remark #15478: estimated potential speedup: 0.780 
   remark #15479: lightweight vector operations: 24 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtrs.f(226,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between DX line 114 and DX line 115
   remark #15346: vector dependence: assumed FLOW dependence between DX line 115 and DX line 114
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtrs.f(226,19)
<Remainder>
LOOP END

LOOP BEGIN at dger.f(195,14) inlined into dgbtrs.f(227,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dger.f(198,22) inlined into dgbtrs.f(227,21)
   <Peeled>
   LOOP END

   LOOP BEGIN at dger.f(198,22) inlined into dgbtrs.f(227,21)
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15389: vectorization support: reference X has unaligned access   [ dger.f(199,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dger.f(198,22) inlined into dgbtrs.f(227,21)
   <Remainder>
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15389: vectorization support: reference X has unaligned access   [ dger.f(199,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dger.f(198,22) inlined into dgbtrs.f(227,21)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbtrs.f(232,13)
   remark #15382: vectorization support: call to function DTBSV..0 cannot be vectorized   [ dgbtrs.f(236,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between 61 line 236 and 61 line 236
   remark #15346: vector dependence: assumed OUTPUT dependence between 61 line 236 and 61 line 236
LOOP END

LOOP BEGIN at dgbtrs.f(244,13)
   remark #15382: vectorization support: call to function DTBSV..0 cannot be vectorized   [ dgbtrs.f(248,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between 65 line 248 and 65 line 248
   remark #15346: vector dependence: assumed OUTPUT dependence between 65 line 248 and 65 line 248
LOOP END

LOOP BEGIN at dgemv.f(308,18) inlined into dgbtrs.f(257,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between Y line 313 and Y line 313
   remark #15346: vector dependence: assumed ANTI dependence between Y line 313 and Y line 313

   LOOP BEGIN at dgemv.f(310,22) inlined into dgbtrs.f(257,21)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemv.f(311,23) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dgemv.f(310,22) inlined into dgbtrs.f(257,21)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dswap.f(85,13) inlined into dgbtrs.f(261,19)
   remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(86,16) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15315: loop was not vectorized: low trip count
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 9.500 
   remark #15478: estimated potential speedup: 0.680 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(85,13) inlined into dgbtrs.f(261,19)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(93,10) inlined into dgbtrs.f(261,19)
   remark #25427: Loop Statements Reordered
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 6 
   remark #15462: unmasked indexed (or gather) loads: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 32 
   remark #15477: vector loop cost: 40.500 
   remark #15478: estimated potential speedup: 0.780 
   remark #15479: lightweight vector operations: 24 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtrs.f(261,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between DX line 114 and DX line 115
   remark #15346: vector dependence: assumed FLOW dependence between DX line 115 and DX line 114
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtrs.f(261,19)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at dgbtrs.f(222,16)
   remark #15529: loop was not vectorized: volatile assignment was not vectorized. Try using non-volatile assignment.   [ dger.f(131,18) ]
LOOP END

LOOP BEGIN at dgbtrs.f(255,16)
   remark #15529: loop was not vectorized: volatile assignment was not vectorized. Try using non-volatile assignment.   [ dgemv.f(157,18) ]
LOOP END
===========================================================================

Begin optimization report for: DTBSV..0

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dtbsv.f(276,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtbsv.f(281,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtbsv.f(281,30)
      remark #25453: Loop Reversed
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(282,31) ]
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(282,31) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dtbsv.f(282,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtbsv.f(281,30)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(282,31) ]
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(282,31) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dtbsv.f(282,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtbsv.f(281,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(289,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between x line 294 and x line 297
   remark #15346: vector dependence: assumed OUTPUT dependence between x line 297 and x line 294

   LOOP BEGIN at dtbsv.f(296,30)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between x line 297 and x line 297
      remark #15346: vector dependence: assumed ANTI dependence between x line 297 and x line 297
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dtbsv.f(296,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(306,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtbsv.f(311,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtbsv.f(311,30)
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(312,31) ]
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(312,31) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dtbsv.f(312,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtbsv.f(311,30)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(312,31) ]
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(312,31) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dtbsv.f(312,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtbsv.f(311,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(318,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtbsv.f(325,30)
   <Multiversioned v1>
      remark #25235: Loop multiversioned to eliminate assumed dependencies
      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ dtbsv.f(326,31) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtbsv.f(326,31) ]
   LOOP END

   LOOP BEGIN at dtbsv.f(325,30)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dtbsv.f(325,30)
   <Multiversioned v2>
      remark #15388: vectorization support: reference a has aligned access   [ dtbsv.f(326,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 22.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtbsv.f(325,30)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(341,22)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dtbsv.f(344,26) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x line 345 and x line 348
   remark #15346: vector dependence: assumed FLOW dependence between x line 348 and x line 345

   LOOP BEGIN at dtbsv.f(344,26)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtbsv.f(345,27) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dtbsv.f(344,26)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(352,22)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dtbsv.f(356,26) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x line 357 and x line 361
   remark #15346: vector dependence: assumed FLOW dependence between x line 361 and x line 357

   LOOP BEGIN at dtbsv.f(356,26)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtbsv.f(357,27) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dtbsv.f(356,26)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(368,22)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dtbsv.f(371,26) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x line 372 and x line 375
   remark #15346: vector dependence: assumed FLOW dependence between x line 375 and x line 372

   LOOP BEGIN at dtbsv.f(371,26)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtbsv.f(372,27) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dtbsv.f(371,26)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(380,22)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dtbsv.f(384,26) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x line 385 and x line 389
   remark #15346: vector dependence: assumed FLOW dependence between x line 389 and x line 385

   LOOP BEGIN at dtbsv.f(384,26)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtbsv.f(385,27) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dtbsv.f(384,26)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DGBCON

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgbcon.f(241,15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbcon.f(247,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at daxpy.f(87,13) inlined into dgbcon.f(255,24)
         remark #15389: vectorization support: reference DY has unaligned access   [ daxpy.f(88,16) ]
         remark #15389: vectorization support: reference DY has unaligned access   [ daxpy.f(88,16) ]
         remark #15389: vectorization support: reference DX has unaligned access   [ daxpy.f(88,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15315: loop was not vectorized: low trip count
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 7.000 
         remark #15478: estimated potential speedup: 0.790 
         remark #15479: lightweight vector operations: 5 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at daxpy.f(87,13) inlined into dgbcon.f(255,24)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at daxpy.f(93,10) inlined into dgbcon.f(255,24)
      <Peeled>
      LOOP END

      LOOP BEGIN at daxpy.f(93,10) inlined into dgbcon.f(255,24)
         remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
         remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
         remark #15389: vectorization support: reference DX has unaligned access   [ daxpy.f(94,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at daxpy.f(93,10) inlined into dgbcon.f(255,24)
      <Remainder>
         remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
         remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
         remark #15389: vectorization support: reference DX has unaligned access   [ daxpy.f(94,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at daxpy.f(93,10) inlined into dgbcon.f(255,24)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dgbcon.f(275,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between DY line 88 and work line 283
      remark #15346: vector dependence: assumed FLOW dependence between work line 283 and DY line 88

      LOOP BEGIN at ddot.f(87,13) inlined into dgbcon.f(277,43)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ddot.f(88,16) ]
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=4
      LOOP END

      LOOP BEGIN at ddot.f(87,13) inlined into dgbcon.f(277,43)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=4
      LOOP END

      LOOP BEGIN at ddot.f(96,10) inlined into dgbcon.f(277,43)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ddot.f(97,11) ]
      LOOP END
   LOOP END

   LOOP BEGIN at idamax.f(84,10) inlined into dgbcon.f(293,18)
      remark #15385: vectorization support: unsupported reduction    [ idamax.f(85,28) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(85,28) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at idamax.f(84,10) inlined into dgbcon.f(293,18)
   <Remainder>
   LOOP END

   LOOP BEGIN at dscal.f(77,7) inlined into dgbcon.f(296,18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dscal.f(87,13) inlined into dgbcon.f(296,18)
         remark #15389: vectorization support: reference work has unaligned access   [ dscal.f(88,16) ]
         remark #15389: vectorization support: reference work has unaligned access   [ dscal.f(88,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15399: vectorization support: unroll factor set to 2
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 10.000 
         remark #15478: estimated potential speedup: 0.850 
         remark #15479: lightweight vector operations: 3 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=4
      LOOP END

      LOOP BEGIN at dscal.f(87,13) inlined into dgbcon.f(296,18)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=4
      LOOP END

      LOOP BEGIN at dscal.f(93,10) inlined into dgbcon.f(296,18)
      <Peeled>
      LOOP END

      LOOP BEGIN at dscal.f(93,10) inlined into dgbcon.f(296,18)
         remark #15388: vectorization support: reference work has aligned access   [ dscal.f(94,13) ]
         remark #15388: vectorization support: reference work has aligned access   [ dscal.f(94,13) ]
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 6 
         remark #15477: vector loop cost: 5.000 
         remark #15478: estimated potential speedup: 4.040 
         remark #15479: lightweight vector operations: 5 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dscal.f(93,10) inlined into dgbcon.f(296,18)
      <Remainder>
         remark #15388: vectorization support: reference work has aligned access   [ dscal.f(94,13) ]
         remark #15388: vectorization support: reference work has aligned access   [ dscal.f(94,13) ]
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dscal.f(93,10) inlined into dgbcon.f(296,18)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DLATBS

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlatbs.f(333,16)
   remark #15382: vectorization support: call to function DASUM..0 cannot be vectorized   [ dlatbs.f(335,29) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at dlatbs.f(341,16)
   remark #15382: vectorization support: call to function DASUM..0 cannot be vectorized   [ dlatbs.f(344,32) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dlatbs.f(341,16)
<Remainder>
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dlatbs.f(355,14)
   remark #15385: vectorization support: unsupported reduction    [ idamax.f(85,28) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(85,28) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dlatbs.f(355,14)
<Remainder>
LOOP END

LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(361,15)
   remark #15389: vectorization support: reference cnorm has unaligned access   [ dscal.f(88,16) ]
   remark #15389: vectorization support: reference cnorm has unaligned access   [ dscal.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(361,15)
<Remainder>
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(361,15)
<Peeled>
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(361,15)
   remark #15388: vectorization support: reference cnorm has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference cnorm has aligned access   [ dscal.f(94,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 4.040 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(361,15)
<Remainder>
   remark #15388: vectorization support: reference cnorm has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference cnorm has aligned access   [ dscal.f(94,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(361,15)
<Remainder>
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dlatbs.f(367,11)
   remark #15385: vectorization support: unsupported reduction    [ idamax.f(85,28) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(85,28) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dlatbs.f(367,11)
<Remainder>
LOOP END

LOOP BEGIN at dlatbs.f(400,16)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at dlatbs.f(431,16)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at dlatbs.f(475,16)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at dlatbs.f(501,16)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(533,18)
   remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(533,18)
<Remainder>
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(533,18)
<Peeled>
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(533,18)
   remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 4.040 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(533,18)
<Remainder>
   remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(533,18)
<Remainder>
LOOP END

LOOP BEGIN at dlatbs.f(541,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(564,30)
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 2
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 10.000 
      remark #15478: estimated potential speedup: 0.850 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(564,30)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(564,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(564,30)
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(564,30)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(564,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(588,27)
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 2
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 10.000 
      remark #15478: estimated potential speedup: 0.850 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(588,27)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(588,27)
   <Peeled>
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(588,27)
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(588,27)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(588,27)
   <Remainder>
   LOOP END

   LOOP BEGIN at dlatbs.f(599,22)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dlatbs.f(599,22)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dlatbs.f(599,22)
         remark #15388: vectorization support: reference x has aligned access   [ dlatbs.f(600,22) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dlatbs.f(599,22)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(619,27)
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 2
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 10.000 
      remark #15478: estimated potential speedup: 0.850 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(619,27)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(619,27)
   <Peeled>
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(619,27)
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(619,27)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(619,27)
   <Remainder>
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(626,24)
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 2
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 10.000 
      remark #15478: estimated potential speedup: 0.920 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(626,24)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(626,24)
      remark #15300: LOOP WAS VECTORIZED
      remark #15460: masked strided loads: 5 
      remark #15462: unmasked indexed (or gather) loads: 5 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 31 
      remark #15477: vector loop cost: 22.500 
      remark #15478: estimated potential speedup: 1.370 
      remark #15479: lightweight vector operations: 23 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(626,24)
   <Remainder>
   LOOP END

   LOOP BEGIN at idamax.f(84,10) inlined into dlatbs.f(640,26)
      remark #15385: vectorization support: unsupported reduction    [ idamax.f(85,28) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(85,28) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at idamax.f(84,10) inlined into dlatbs.f(640,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at idamax.f(84,10) inlined into dlatbs.f(653,27)
      remark #15385: vectorization support: unsupported reduction    [ idamax.f(85,28) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(85,28) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at idamax.f(84,10) inlined into dlatbs.f(653,27)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlatbs.f(662,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(689,27)
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 2
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 10.000 
      remark #15478: estimated potential speedup: 0.850 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(689,27)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(689,27)
   <Peeled>
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(689,27)
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(689,27)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(689,27)
   <Remainder>
   LOOP END

   LOOP BEGIN at ddot.f(87,13) inlined into dlatbs.f(708,32)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ddot.f(88,16) ]
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at ddot.f(87,13) inlined into dlatbs.f(708,32)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at ddot.f(96,10) inlined into dlatbs.f(708,32)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ddot.f(97,11) ]
   LOOP END

   LOOP BEGIN at dlatbs.f(716,25)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dlatbs.f(717,25) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dlatbs.f(716,25)
   <Remainder>
   LOOP END

   LOOP BEGIN at dlatbs.f(722,25)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dlatbs.f(723,25) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dlatbs.f(722,25)
   <Remainder>
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(756,33)
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 2
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 10.000 
      remark #15478: estimated potential speedup: 0.850 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(756,33)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(756,33)
   <Peeled>
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(756,33)
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(756,33)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(756,33)
   <Remainder>
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(771,30)
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dscal.f(88,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 2
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 10.000 
      remark #15478: estimated potential speedup: 0.850 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(771,30)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(771,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(771,30)
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(771,30)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference x has aligned access   [ dscal.f(94,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(771,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dlatbs.f(781,25)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dlatbs.f(781,25)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dlatbs.f(781,25)
         remark #15388: vectorization support: reference x has aligned access   [ dlatbs.f(782,25) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dlatbs.f(781,25)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(805,15)
   remark #15389: vectorization support: reference cnorm has unaligned access   [ dscal.f(88,16) ]
   remark #15389: vectorization support: reference cnorm has unaligned access   [ dscal.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(87,13) inlined into dlatbs.f(805,15)
<Remainder>
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(805,15)
<Peeled>
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(805,15)
   remark #15388: vectorization support: reference cnorm has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference cnorm has aligned access   [ dscal.f(94,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 4.040 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(805,15)
<Remainder>
   remark #15388: vectorization support: reference cnorm has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference cnorm has aligned access   [ dscal.f(94,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dlatbs.f(805,15)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: DAXPY..0

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at daxpy.f(87,13)
   remark #15389: vectorization support: reference dy has unaligned access   [ daxpy.f(88,16) ]
   remark #15389: vectorization support: reference dy has unaligned access   [ daxpy.f(88,16) ]
   remark #15389: vectorization support: reference dx has unaligned access   [ daxpy.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15315: loop was not vectorized: low trip count
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 0.790 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at daxpy.f(87,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at daxpy.f(93,10)
<Peeled>
LOOP END

LOOP BEGIN at daxpy.f(93,10)
   remark #15388: vectorization support: reference dy has aligned access   [ daxpy.f(94,13) ]
   remark #15388: vectorization support: reference dy has aligned access   [ daxpy.f(94,13) ]
   remark #15389: vectorization support: reference dx has unaligned access   [ daxpy.f(94,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 13.000 
   remark #15478: estimated potential speedup: 2.540 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at daxpy.f(93,10)
<Remainder>
   remark #15388: vectorization support: reference dy has aligned access   [ daxpy.f(94,13) ]
   remark #15388: vectorization support: reference dy has aligned access   [ daxpy.f(94,13) ]
   remark #15389: vectorization support: reference dx has unaligned access   [ daxpy.f(94,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at daxpy.f(93,10)
<Remainder>
LOOP END

LOOP BEGIN at daxpy.f(108,10)
<Multiversioned v1>
   remark #25235: Loop multiversioned to eliminate assumed dependencies
   remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ daxpy.f(109,11) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ daxpy.f(109,11) ]
LOOP END

LOOP BEGIN at daxpy.f(108,10)
<Multiversioned v2>
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 1.370 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at daxpy.f(108,10)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: DDOT..0

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at ddot.f(87,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ddot.f(88,16) ]
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ddot.f(87,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ddot.f(96,10)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ddot.f(97,11) ]
LOOP END
===========================================================================

Begin optimization report for: DLANTB

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlantb.f(188,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between value line 191 and value line 191
   remark #15346: vector dependence: assumed ANTI dependence between value line 191 and value line 191
   remark #15346: vector dependence: assumed ANTI dependence between value line 191 and value line 191
   remark #15346: vector dependence: assumed FLOW dependence between value line 191 and value line 191

   LOOP BEGIN at dlantb.f(189,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between value line 191 and value line 191
      remark #15346: vector dependence: assumed ANTI dependence between value line 191 and value line 191
      remark #15346: vector dependence: assumed ANTI dependence between value line 191 and value line 191
      remark #15346: vector dependence: assumed FLOW dependence between value line 191 and value line 191
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(195,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between value line 198 and value line 198
   remark #15346: vector dependence: assumed ANTI dependence between value line 198 and value line 198
   remark #15346: vector dependence: assumed ANTI dependence between value line 198 and value line 198
   remark #15346: vector dependence: assumed FLOW dependence between value line 198 and value line 198

   LOOP BEGIN at dlantb.f(196,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between value line 198 and value line 198
      remark #15346: vector dependence: assumed ANTI dependence between value line 198 and value line 198
      remark #15346: vector dependence: assumed ANTI dependence between value line 198 and value line 198
      remark #15346: vector dependence: assumed FLOW dependence between value line 198 and value line 198
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(205,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between value line 208 and value line 208
   remark #15346: vector dependence: assumed ANTI dependence between value line 208 and value line 208
   remark #15346: vector dependence: assumed ANTI dependence between value line 208 and value line 208
   remark #15346: vector dependence: assumed FLOW dependence between value line 208 and value line 208

   LOOP BEGIN at dlantb.f(206,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between value line 208 and value line 208
      remark #15346: vector dependence: assumed ANTI dependence between value line 208 and value line 208
      remark #15346: vector dependence: assumed ANTI dependence between value line 208 and value line 208
      remark #15346: vector dependence: assumed FLOW dependence between value line 208 and value line 208
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(212,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between value line 215 and value line 215
   remark #15346: vector dependence: assumed ANTI dependence between value line 215 and value line 215
   remark #15346: vector dependence: assumed ANTI dependence between value line 215 and value line 215
   remark #15346: vector dependence: assumed FLOW dependence between value line 215 and value line 215

   LOOP BEGIN at dlantb.f(213,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between value line 215 and value line 215
      remark #15346: vector dependence: assumed ANTI dependence between value line 215 and value line 215
      remark #15346: vector dependence: assumed ANTI dependence between value line 215 and value line 215
      remark #15346: vector dependence: assumed FLOW dependence between value line 215 and value line 215
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(264,19)
<Peeled>
LOOP END

LOOP BEGIN at dlantb.f(264,19)
   remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(265,19) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 4.370 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dlantb.f(264,19)
<Remainder>
   remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(265,19) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dlantb.f(264,19)
<Remainder>
LOOP END

LOOP BEGIN at dlantb.f(267,19)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dlantb.f(269,22) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlantb.f(269,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlantb.f(269,22)
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(270,22) ]
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(270,22) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dlantb.f(270,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 12.000 
      remark #15478: estimated potential speedup: 3.000 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlantb.f(269,22)
   <Remainder>
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(270,22) ]
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(270,22) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dlantb.f(270,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlantb.f(269,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(274,19)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlantb.f(274,19)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dlantb.f(274,19)
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(275,19) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dlantb.f(274,19)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(277,19)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dlantb.f(279,22) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlantb.f(279,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlantb.f(279,22)
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(280,22) ]
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(280,22) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dlantb.f(280,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 12.000 
      remark #15478: estimated potential speedup: 3.000 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlantb.f(279,22)
   <Remainder>
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(280,22) ]
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(280,22) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dlantb.f(280,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlantb.f(279,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(286,19)
<Peeled>
LOOP END

LOOP BEGIN at dlantb.f(286,19)
   remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(287,19) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 3.000 
   remark #15478: estimated potential speedup: 4.370 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dlantb.f(286,19)
<Remainder>
   remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(287,19) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dlantb.f(286,19)
<Remainder>
LOOP END

LOOP BEGIN at dlantb.f(289,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlantb.f(291,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlantb.f(291,22)
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(292,22) ]
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(292,22) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dlantb.f(292,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 12.000 
      remark #15478: estimated potential speedup: 3.000 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlantb.f(291,22)
   <Remainder>
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(292,22) ]
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(292,22) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dlantb.f(292,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlantb.f(291,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(296,19)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlantb.f(296,19)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dlantb.f(296,19)
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(297,19) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dlantb.f(296,19)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(299,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlantb.f(301,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlantb.f(301,22)
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(302,22) ]
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(302,22) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dlantb.f(302,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 12.000 
      remark #15478: estimated potential speedup: 3.000 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlantb.f(301,22)
   <Remainder>
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(302,22) ]
      remark #15388: vectorization support: reference work has aligned access   [ dlantb.f(302,22) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dlantb.f(302,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlantb.f(301,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(307,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between value line 309 and value line 309
   remark #15346: vector dependence: assumed ANTI dependence between value line 309 and value line 309
   remark #15346: vector dependence: assumed ANTI dependence between value line 309 and value line 309
LOOP END

LOOP BEGIN at dlantb.f(320,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144

   LOOP BEGIN at dlassq.f(139,13) inlined into dlantb.f(321,27)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
      remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
      remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
      remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(329,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144

   LOOP BEGIN at dlassq.f(139,13) inlined into dlantb.f(330,24)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
      remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
      remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
      remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(339,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144

   LOOP BEGIN at dlassq.f(139,13) inlined into dlantb.f(340,27)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
      remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
      remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
      remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(347,19)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144

   LOOP BEGIN at dlassq.f(139,13) inlined into dlantb.f(348,24)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
      remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
      remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
      remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(227,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between value line 239 and value line 239
   remark #15346: vector dependence: assumed ANTI dependence between value line 239 and value line 239
   remark #15346: vector dependence: assumed ANTI dependence between value line 239 and value line 239

   LOOP BEGIN at dlantb.f(230,22)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dlantb.f(231,22) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dlantb.f(230,22)
   <Remainder>
   LOOP END

   LOOP BEGIN at dlantb.f(235,22)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dlantb.f(236,22) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dlantb.f(235,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlantb.f(242,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between value line 254 and value line 254
   remark #15346: vector dependence: assumed ANTI dependence between value line 254 and value line 254
   remark #15346: vector dependence: assumed ANTI dependence between value line 254 and value line 254

   LOOP BEGIN at dlantb.f(245,22)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dlantb.f(246,22) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dlantb.f(245,22)
   <Remainder>
   LOOP END

   LOOP BEGIN at dlantb.f(250,22)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dlantb.f(251,22) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dlantb.f(250,22)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DLANGB

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlangb.f(170,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between value line 173 and value line 173
   remark #15346: vector dependence: assumed ANTI dependence between value line 173 and value line 173
   remark #15346: vector dependence: assumed ANTI dependence between value line 173 and value line 173
   remark #15346: vector dependence: assumed FLOW dependence between value line 173 and value line 173

   LOOP BEGIN at dlangb.f(171,16)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between value line 173 and value line 173
      remark #15346: vector dependence: assumed ANTI dependence between value line 173 and value line 173
      remark #15346: vector dependence: assumed ANTI dependence between value line 173 and value line 173
      remark #15346: vector dependence: assumed FLOW dependence between value line 173 and value line 173
   LOOP END
LOOP END

LOOP BEGIN at dlangb.f(192,13)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlangb.f(192,13)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dlangb.f(192,13)
      remark #15388: vectorization support: reference work has aligned access   [ dlangb.f(193,13) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dlangb.f(192,13)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at dlangb.f(195,13)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dlangb.f(197,16) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlangb.f(197,16)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlangb.f(197,16)
      remark #15388: vectorization support: reference work has aligned access   [ dlangb.f(198,16) ]
      remark #15388: vectorization support: reference work has aligned access   [ dlangb.f(198,16) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dlangb.f(198,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 10 
      remark #15477: vector loop cost: 12.000 
      remark #15478: estimated potential speedup: 3.000 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlangb.f(197,16)
   <Remainder>
      remark #15388: vectorization support: reference work has aligned access   [ dlangb.f(198,16) ]
      remark #15388: vectorization support: reference work has aligned access   [ dlangb.f(198,16) ]
      remark #15389: vectorization support: reference ab has unaligned access   [ dlangb.f(198,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlangb.f(197,16)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlangb.f(202,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between value line 204 and value line 204
   remark #15346: vector dependence: assumed ANTI dependence between value line 204 and value line 204
   remark #15346: vector dependence: assumed ANTI dependence between value line 204 and value line 204
LOOP END

LOOP BEGIN at dlangb.f(212,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144

   LOOP BEGIN at dlassq.f(139,13) inlined into dlangb.f(215,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
      remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
      remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
      remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   LOOP END
LOOP END

LOOP BEGIN at dlangb.f(181,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between value line 186 and value line 186
   remark #15346: vector dependence: assumed ANTI dependence between value line 186 and value line 186
   remark #15346: vector dependence: assumed ANTI dependence between value line 186 and value line 186

   LOOP BEGIN at dlangb.f(183,16)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dlangb.f(184,16) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dlangb.f(183,16)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DLAGTM..0

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlagtm.f(248,22)
<Peeled>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at dlagtm.f(248,22)
   remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(249,22) ]
   remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 51.000 
   remark #15478: estimated potential speedup: 1.450 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dlagtm.f(248,22)
<Remainder>
   remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(249,22) ]
   remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(249,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dlagtm.f(248,22)
<Remainder>
LOOP END

LOOP BEGIN at dlagtm.f(266,22)
<Peeled>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at dlagtm.f(266,22)
   remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(267,22) ]
   remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 19 
   remark #15477: vector loop cost: 51.000 
   remark #15478: estimated potential speedup: 1.450 
   remark #15479: lightweight vector operations: 14 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dlagtm.f(266,22)
<Remainder>
   remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(267,22) ]
   remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(267,22) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dlagtm.f(266,22)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: DLAQGB

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlaqgb.f(221,16)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dlaqgb.f(223,19) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlaqgb.f(223,19)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlaqgb.f(223,19)
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(224,19) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(224,19) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlaqgb.f(223,19)
   <Remainder>
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(224,19) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(224,19) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlaqgb.f(223,19)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlaqgb.f(233,13)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dlaqgb.f(234,16) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlaqgb.f(234,16)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlaqgb.f(234,16)
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(235,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dlaqgb.f(235,16) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(235,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.050 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlaqgb.f(234,16)
   <Remainder>
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(235,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dlaqgb.f(235,16) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(235,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlaqgb.f(234,16)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlaqgb.f(243,13)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dlaqgb.f(245,16) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlaqgb.f(245,16)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlaqgb.f(245,16)
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(246,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dlaqgb.f(246,16) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(246,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlaqgb.f(245,16)
   <Remainder>
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(246,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dlaqgb.f(246,16) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(246,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlaqgb.f(245,16)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DAXPY

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at daxpy.f(87,13)
   remark #15389: vectorization support: reference dy has unaligned access   [ daxpy.f(88,16) ]
   remark #15389: vectorization support: reference dy has unaligned access   [ daxpy.f(88,16) ]
   remark #15389: vectorization support: reference dx has unaligned access   [ daxpy.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15315: loop was not vectorized: low trip count
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 7.000 
   remark #15478: estimated potential speedup: 0.790 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at daxpy.f(87,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at daxpy.f(93,10)
<Peeled>
LOOP END

LOOP BEGIN at daxpy.f(93,10)
   remark #15388: vectorization support: reference dy has aligned access   [ daxpy.f(94,13) ]
   remark #15388: vectorization support: reference dy has aligned access   [ daxpy.f(94,13) ]
   remark #15389: vectorization support: reference dx has unaligned access   [ daxpy.f(94,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 13.000 
   remark #15478: estimated potential speedup: 2.540 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at daxpy.f(93,10)
<Remainder>
   remark #15388: vectorization support: reference dy has aligned access   [ daxpy.f(94,13) ]
   remark #15388: vectorization support: reference dy has aligned access   [ daxpy.f(94,13) ]
   remark #15389: vectorization support: reference dx has unaligned access   [ daxpy.f(94,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at daxpy.f(93,10)
<Remainder>
LOOP END

LOOP BEGIN at daxpy.f(108,10)
<Multiversioned v1>
   remark #25235: Loop multiversioned to eliminate assumed dependencies
   remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ daxpy.f(109,11) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ daxpy.f(109,11) ]
LOOP END

LOOP BEGIN at daxpy.f(108,10)
<Multiversioned v2>
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 1.370 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at daxpy.f(108,10)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: DLAGTM

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlagtm.f(184,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlagtm.f(185,16)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dlagtm.f(185,16)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dlagtm.f(185,16)
         remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(186,16) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dlagtm.f(185,16)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dlagtm.f(190,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlagtm.f(191,16)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlagtm.f(191,16)
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(192,16) ]
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(192,16) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 5 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 4.180 
      remark #15479: lightweight vector operations: 4 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlagtm.f(191,16)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(192,16) ]
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(192,16) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlagtm.f(191,16)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlagtm.f(202,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlagtm.f(210,22)
   <Peeled>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at dlagtm.f(210,22)
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(211,22) ]
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(211,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 19 
      remark #15477: vector loop cost: 51.000 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 14 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlagtm.f(210,22)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(211,22) ]
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(211,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(211,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlagtm.f(210,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlagtm.f(220,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlagtm.f(228,22)
   <Peeled>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at dlagtm.f(228,22)
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(229,22) ]
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(229,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 19 
      remark #15477: vector loop cost: 51.000 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 14 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlagtm.f(228,22)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(229,22) ]
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(229,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(229,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlagtm.f(228,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlagtm.f(240,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlagtm.f(248,22)
   <Peeled>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at dlagtm.f(248,22)
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(249,22) ]
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 19 
      remark #15477: vector loop cost: 51.000 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 14 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlagtm.f(248,22)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(249,22) ]
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(249,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(249,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlagtm.f(248,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlagtm.f(258,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlagtm.f(266,22)
   <Peeled>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at dlagtm.f(266,22)
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(267,22) ]
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 19 
      remark #15477: vector loop cost: 51.000 
      remark #15478: estimated potential speedup: 1.450 
      remark #15479: lightweight vector operations: 14 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlagtm.f(266,22)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(267,22) ]
      remark #15388: vectorization support: reference b has aligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference du has unaligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference d has unaligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference dl has unaligned access   [ dlagtm.f(267,22) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dlagtm.f(267,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlagtm.f(266,22)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DTRSM

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dtrsm.f(263,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(264,18)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(264,18)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dtrsm.f(264,18)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(265,19) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dtrsm.f(264,18)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(279,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(281,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(281,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(281,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(282,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(281,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(285,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(288,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(288,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(289,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(288,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(289,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(289,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(288,34)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(295,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(297,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(297,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(297,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(298,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(297,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(301,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(304,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(304,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(305,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(304,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(305,35) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dtrsm.f(305,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(304,34)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(316,22)
   remark #15301: OUTER LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 50 
   remark #15477: vector loop cost: 19.250 
   remark #15478: estimated potential speedup: 2.580 
   remark #15479: lightweight vector operations: 22 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at dtrsm.f(317,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between b line 320 and b line 323
      remark #15346: vector dependence: assumed FLOW dependence between b line 323 and b line 320

      LOOP BEGIN at dtrsm.f(319,30)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtrsm.f(320,31) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(316,22)
<Remainder>

   LOOP BEGIN at dtrsm.f(317,26)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at dtrsm.f(319,30)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(327,22)
   remark #15301: OUTER LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 50 
   remark #15477: vector loop cost: 19.250 
   remark #15478: estimated potential speedup: 2.580 
   remark #15479: lightweight vector operations: 22 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at dtrsm.f(328,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between b line 331 and b line 334

      LOOP BEGIN at dtrsm.f(330,30)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtrsm.f(331,31) ]
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(327,22)
<Remainder>

   LOOP BEGIN at dtrsm.f(328,26)
      remark #25460: No loop optimizations reported

      LOOP BEGIN at dtrsm.f(330,30)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(345,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(347,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(347,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(347,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(348,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(347,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(351,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(353,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(353,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(354,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(353,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(354,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(354,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(353,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(361,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(360,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(366,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(368,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(368,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(368,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(369,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(368,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(372,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(374,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(374,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(375,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(374,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(375,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(375,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(374,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(382,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(381,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(392,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(395,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(395,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(395,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(396,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(395,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(399,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(402,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(402,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(403,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(402,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(403,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(403,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(402,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(409,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(408,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtrsm.f(414,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtrsm.f(417,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(417,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(417,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(418,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(417,30)
   <Remainder>
   LOOP END

   LOOP BEGIN at dtrsm.f(421,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dtrsm.f(424,34)
      <Peeled>
      LOOP END

      LOOP BEGIN at dtrsm.f(424,34)
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(425,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dtrsm.f(424,34)
      <Remainder>
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(425,35) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dtrsm.f(425,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dtrsm.f(424,34)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15388: vectorization support: reference b has aligned access   [ dtrsm.f(431,31) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtrsm.f(430,30)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DLASWP

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlaswp.f(156,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlaswp.f(158,16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dlaswp.f(161,22)
         remark #15399: vectorization support: unroll factor set to 8
         remark #15300: LOOP WAS VECTORIZED
         remark #15460: masked strided loads: 2 
         remark #15462: unmasked indexed (or gather) loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 76.000 
         remark #15478: estimated potential speedup: 1.130 
         remark #15479: lightweight vector operations: 6 
         remark #15480: medium-overhead vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=2
      LOOP END

      LOOP BEGIN at dlaswp.f(161,22)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dlaswp.f(174,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlaswp.f(177,19)
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15460: masked strided loads: 2 
      remark #15462: unmasked indexed (or gather) loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 38.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlaswp.f(177,19)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DGER

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dger.f(195,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dger.f(198,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dger.f(198,22)
      remark #15388: vectorization support: reference a has aligned access   [ dger.f(199,23) ]
      remark #15388: vectorization support: reference a has aligned access   [ dger.f(199,23) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dger.f(199,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dger.f(198,22)
   <Remainder>
      remark #15388: vectorization support: reference a has aligned access   [ dger.f(199,23) ]
      remark #15388: vectorization support: reference a has aligned access   [ dger.f(199,23) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dger.f(199,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dger.f(198,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dger.f(210,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dger.f(214,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dger.f(214,22)
      remark #15388: vectorization support: reference a has aligned access   [ dger.f(215,23) ]
      remark #15388: vectorization support: reference a has aligned access   [ dger.f(215,23) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 2.390 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dger.f(214,22)
   <Remainder>
      remark #15388: vectorization support: reference a has aligned access   [ dger.f(215,23) ]
      remark #15388: vectorization support: reference a has aligned access   [ dger.f(215,23) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dger.f(214,22)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DSCAL

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dscal.f(87,13)
   remark #15389: vectorization support: reference dx has unaligned access   [ dscal.f(88,16) ]
   remark #15389: vectorization support: reference dx has unaligned access   [ dscal.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(87,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(93,10)
<Peeled>
LOOP END

LOOP BEGIN at dscal.f(93,10)
   remark #15388: vectorization support: reference dx has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference dx has aligned access   [ dscal.f(94,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 4.040 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dscal.f(93,10)
<Remainder>
   remark #15388: vectorization support: reference dx has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference dx has aligned access   [ dscal.f(94,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dscal.f(93,10)
<Remainder>
LOOP END

LOOP BEGIN at dscal.f(105,10)
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 11.500 
   remark #15478: estimated potential speedup: 1.190 
   remark #15479: lightweight vector operations: 7 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dscal.f(105,10)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: DGEMV

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgemv.f(250,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemv.f(250,22)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dgemv.f(250,22)
      remark #15388: vectorization support: reference y has aligned access   [ dgemv.f(251,23) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dgemv.f(250,22)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at dgemv.f(254,22)
<Peeled>
LOOP END

LOOP BEGIN at dgemv.f(254,22)
   remark #15388: vectorization support: reference y has aligned access   [ dgemv.f(255,23) ]
   remark #15388: vectorization support: reference y has aligned access   [ dgemv.f(255,23) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 4.040 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgemv.f(254,22)
<Remainder>
   remark #15388: vectorization support: reference y has aligned access   [ dgemv.f(255,23) ]
   remark #15388: vectorization support: reference y has aligned access   [ dgemv.f(255,23) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgemv.f(254,22)
<Remainder>
LOOP END

LOOP BEGIN at dgemv.f(261,22)
<Multiversioned v2>
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 1.570 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgemv.f(261,22)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at dgemv.f(266,22)
<Multiversioned v1>
   remark #25235: Loop multiversioned to eliminate assumed dependencies
   remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ dgemv.f(267,23) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemv.f(267,23) ]
LOOP END

LOOP BEGIN at dgemv.f(266,22)
<Multiversioned v2>
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 18.000 
   remark #15478: estimated potential speedup: 1.320 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgemv.f(266,22)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at dgemv.f(280,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemv.f(283,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemv.f(283,26)
      remark #15388: vectorization support: reference y has aligned access   [ dgemv.f(284,27) ]
      remark #15388: vectorization support: reference y has aligned access   [ dgemv.f(284,27) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dgemv.f(284,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemv.f(283,26)
   <Remainder>
      remark #15388: vectorization support: reference y has aligned access   [ dgemv.f(284,27) ]
      remark #15388: vectorization support: reference y has aligned access   [ dgemv.f(284,27) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dgemv.f(284,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemv.f(283,26)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgemv.f(290,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemv.f(294,26)
   <Multiversioned v1>
      remark #25235: Loop multiversioned to eliminate assumed dependencies
      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ dgemv.f(295,27) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemv.f(295,27) ]
   LOOP END

   LOOP BEGIN at dgemv.f(294,26)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dgemv.f(294,26)
   <Multiversioned v2>
      remark #15388: vectorization support: reference a has aligned access   [ dgemv.f(295,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 22.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemv.f(294,26)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dgemv.f(308,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between y line 313 and y line 313

   LOOP BEGIN at dgemv.f(310,22)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemv.f(311,23) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dgemv.f(310,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgemv.f(317,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between y line 324 and y line 324

   LOOP BEGIN at dgemv.f(320,22)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemv.f(321,23) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dgemv.f(320,22)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DTBSV

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dtbsv.f(276,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtbsv.f(281,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtbsv.f(281,30)
      remark #25453: Loop Reversed
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(282,31) ]
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(282,31) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dtbsv.f(282,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15301: REVERSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtbsv.f(281,30)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(282,31) ]
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(282,31) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dtbsv.f(282,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtbsv.f(281,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(289,22)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between x line 294 and x line 297
   remark #15346: vector dependence: assumed OUTPUT dependence between x line 297 and x line 294

   LOOP BEGIN at dtbsv.f(296,30)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between x line 297 and x line 297
      remark #15346: vector dependence: assumed ANTI dependence between x line 297 and x line 297
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dtbsv.f(296,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(306,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtbsv.f(311,30)
   <Peeled>
   LOOP END

   LOOP BEGIN at dtbsv.f(311,30)
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(312,31) ]
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(312,31) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dtbsv.f(312,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtbsv.f(311,30)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(312,31) ]
      remark #15388: vectorization support: reference x has aligned access   [ dtbsv.f(312,31) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dtbsv.f(312,31) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dtbsv.f(311,30)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(318,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dtbsv.f(325,30)
   <Multiversioned v1>
      remark #25235: Loop multiversioned to eliminate assumed dependencies
      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ dtbsv.f(326,31) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtbsv.f(326,31) ]
   LOOP END

   LOOP BEGIN at dtbsv.f(325,30)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dtbsv.f(325,30)
   <Multiversioned v2>
      remark #15388: vectorization support: reference a has aligned access   [ dtbsv.f(326,31) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 22.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dtbsv.f(325,30)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(341,22)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dtbsv.f(344,26) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x line 345 and x line 348
   remark #15346: vector dependence: assumed FLOW dependence between x line 348 and x line 345

   LOOP BEGIN at dtbsv.f(344,26)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtbsv.f(345,27) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dtbsv.f(344,26)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(352,22)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dtbsv.f(356,26) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x line 357 and x line 361
   remark #15346: vector dependence: assumed FLOW dependence between x line 361 and x line 357

   LOOP BEGIN at dtbsv.f(356,26)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtbsv.f(357,27) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dtbsv.f(356,26)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(368,22)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dtbsv.f(371,26) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x line 372 and x line 375
   remark #15346: vector dependence: assumed FLOW dependence between x line 375 and x line 372

   LOOP BEGIN at dtbsv.f(371,26)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtbsv.f(372,27) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dtbsv.f(371,26)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dtbsv.f(380,22)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dtbsv.f(384,26) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x line 385 and x line 389
   remark #15346: vector dependence: assumed FLOW dependence between x line 389 and x line 385

   LOOP BEGIN at dtbsv.f(384,26)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dtbsv.f(385,27) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dtbsv.f(384,26)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DRSCL

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dscal.f(77,12) inlined into drscl.f(165,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dscal.f(87,13) inlined into drscl.f(165,12)
      remark #15389: vectorization support: reference sx has unaligned access   [ dscal.f(88,16) ]
      remark #15389: vectorization support: reference sx has unaligned access   [ dscal.f(88,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 2
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 10.000 
      remark #15478: estimated potential speedup: 0.850 
      remark #15479: lightweight vector operations: 3 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(87,13) inlined into drscl.f(165,12)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=4
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into drscl.f(165,12)
   <Peeled>
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into drscl.f(165,12)
      remark #15388: vectorization support: reference sx has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference sx has aligned access   [ dscal.f(94,13) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into drscl.f(165,12)
   <Remainder>
      remark #15388: vectorization support: reference sx has aligned access   [ dscal.f(94,13) ]
      remark #15388: vectorization support: reference sx has aligned access   [ dscal.f(94,13) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dscal.f(93,10) inlined into drscl.f(165,12)
   <Remainder>
   LOOP END

   LOOP BEGIN at dscal.f(105,10) inlined into drscl.f(165,12)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sx line 106 and sx line 106
      remark #15346: vector dependence: assumed ANTI dependence between sx line 106 and sx line 106
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dscal.f(105,10) inlined into drscl.f(165,12)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DDOT

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at ddot.f(87,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ddot.f(88,16) ]
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ddot.f(87,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at ddot.f(96,10)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ddot.f(97,11) ]
LOOP END

LOOP BEGIN at ddot.f(109,10)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ ddot.f(110,13) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ddot.f(109,10)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: DGBMV

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgbmv.f(283,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbmv.f(283,22)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dgbmv.f(283,22)
      remark #15388: vectorization support: reference y has aligned access   [ dgbmv.f(284,23) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dgbmv.f(283,22)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at dgbmv.f(287,22)
<Peeled>
LOOP END

LOOP BEGIN at dgbmv.f(287,22)
   remark #15388: vectorization support: reference y has aligned access   [ dgbmv.f(288,23) ]
   remark #15388: vectorization support: reference y has aligned access   [ dgbmv.f(288,23) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 4.040 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbmv.f(287,22)
<Remainder>
   remark #15388: vectorization support: reference y has aligned access   [ dgbmv.f(288,23) ]
   remark #15388: vectorization support: reference y has aligned access   [ dgbmv.f(288,23) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgbmv.f(287,22)
<Remainder>
LOOP END

LOOP BEGIN at dgbmv.f(294,22)
<Multiversioned v2>
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 1.570 
   remark #15479: lightweight vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbmv.f(294,22)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at dgbmv.f(299,22)
<Multiversioned v1>
   remark #25235: Loop multiversioned to eliminate assumed dependencies
   remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ dgbmv.f(300,23) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbmv.f(300,23) ]
LOOP END

LOOP BEGIN at dgbmv.f(299,22)
<Multiversioned v2>
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 18.000 
   remark #15478: estimated potential speedup: 1.320 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbmv.f(299,22)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at dgbmv.f(314,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbmv.f(318,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgbmv.f(318,26)
      remark #15388: vectorization support: reference y has aligned access   [ dgbmv.f(319,27) ]
      remark #15388: vectorization support: reference y has aligned access   [ dgbmv.f(319,27) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dgbmv.f(319,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 7 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbmv.f(318,26)
   <Remainder>
      remark #15388: vectorization support: reference y has aligned access   [ dgbmv.f(319,27) ]
      remark #15388: vectorization support: reference y has aligned access   [ dgbmv.f(319,27) ]
      remark #15389: vectorization support: reference a has unaligned access   [ dgbmv.f(319,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgbmv.f(318,26)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbmv.f(325,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbmv.f(330,26)
   <Multiversioned v1>
      remark #25235: Loop multiversioned to eliminate assumed dependencies
      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ dgbmv.f(331,27) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbmv.f(331,27) ]
   LOOP END

   LOOP BEGIN at dgbmv.f(330,26)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dgbmv.f(330,26)
   <Multiversioned v2>
      remark #15388: vectorization support: reference a has aligned access   [ dgbmv.f(331,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 22.000 
      remark #15478: estimated potential speedup: 1.600 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbmv.f(330,26)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dgbmv.f(345,18)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dgbmv.f(348,22) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between y line 351 and y line 351

   LOOP BEGIN at dgbmv.f(348,22)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbmv.f(349,23) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dgbmv.f(348,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbmv.f(355,18)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dgbmv.f(359,22) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between y line 363 and y line 363

   LOOP BEGIN at dgbmv.f(359,22)
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbmv.f(360,23) ]
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dgbmv.f(359,22)
   <Remainder>
   LOOP END
LOOP END
===========================================================================
