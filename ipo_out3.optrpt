
Begin optimization report for: DGBTRF

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgbtrf.f(239,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=64

   LOOP BEGIN at dgbtrf.f(240,16)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=65
   LOOP END

   LOOP BEGIN at dgbtrf.f(240,16)
      remark #15388: vectorization support: reference work13 has aligned access   [ dgbtrf.f(241,16) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 6.000 
      remark #15478: estimated potential speedup: 2.360 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=8
   LOOP END

   LOOP BEGIN at dgbtrf.f(240,16)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=65
   LOOP END
LOOP END

LOOP BEGIN at dgbtrf.f(247,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=64

   LOOP BEGIN at dgbtrf.f(248,16)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=65
   LOOP END

   LOOP BEGIN at dgbtrf.f(248,16)
      remark #15388: vectorization support: reference work31 has aligned access   [ dgbtrf.f(249,16) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 6.000 
      remark #15478: estimated potential speedup: 2.360 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=8
   LOOP END

   LOOP BEGIN at dgbtrf.f(248,16)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=65
   LOOP END
LOOP END

LOOP BEGIN at dgbtrf.f(257,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbtrf.f(258,16)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgbtrf.f(258,16)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgbtrf.f(258,16)
         remark #15388: vectorization support: reference ab has aligned access   [ dgbtrf.f(259,16) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgbtrf.f(258,16)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgbtrf.f(295,22)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbtrf.f(295,22)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dgbtrf.f(295,22)
      remark #15388: vectorization support: reference ab has aligned access   [ dgbtrf.f(296,22) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dgbtrf.f(295,22)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dgbtrf.f(304,21)
   remark #15385: vectorization support: unsupported reduction    [ idamax.f(85,28) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(85,28) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dgbtrf.f(304,21)
<Remainder>
LOOP END

LOOP BEGIN at dswap.f(85,13) inlined into dgbtrf.f(314,30)
   remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(86,16) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15315: loop was not vectorized: low trip count
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 9.500 
   remark #15478: estimated potential speedup: 0.680 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(85,13) inlined into dgbtrf.f(314,30)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(93,10) inlined into dgbtrf.f(314,30)
   remark #25427: Loop Statements Reordered
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 6 
   remark #15462: unmasked indexed (or gather) loads: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 32 
   remark #15477: vector loop cost: 40.500 
   remark #15478: estimated potential speedup: 0.780 
   remark #15479: lightweight vector operations: 24 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtrf.f(314,30)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between DX line 114 and DX line 115
   remark #15346: vector dependence: assumed FLOW dependence between DX line 115 and DX line 114
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtrf.f(314,30)
<Remainder>
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtrf.f(321,30)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between DX line 114 and DX line 115
   remark #15346: vector dependence: assumed FLOW dependence between DX line 115 and DX line 114
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtrf.f(321,30)
<Remainder>
LOOP END

LOOP BEGIN at dswap.f(85,13) inlined into dgbtrf.f(323,30)
   remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(86,16) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15315: loop was not vectorized: low trip count
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 9.500 
   remark #15478: estimated potential speedup: 0.680 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(85,13) inlined into dgbtrf.f(323,30)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(93,10) inlined into dgbtrf.f(323,30)
   remark #25427: Loop Statements Reordered
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 6 
   remark #15462: unmasked indexed (or gather) loads: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 32 
   remark #15477: vector loop cost: 40.500 
   remark #15478: estimated potential speedup: 0.780 
   remark #15479: lightweight vector operations: 24 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtrf.f(323,30)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between DX line 114 and DX line 115
   remark #15346: vector dependence: assumed FLOW dependence between DX line 115 and DX line 114
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dswap.f(113,10) inlined into dgbtrf.f(323,30)
<Remainder>
LOOP END

LOOP BEGIN at dscal.f(87,13) inlined into dgbtrf.f(330,24)
   remark #15389: vectorization support: reference DX has unaligned access   [ dscal.f(88,16) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ dscal.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 0.850 
   remark #15479: lightweight vector operations: 3 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(87,13) inlined into dgbtrf.f(330,24)
<Remainder>
   remark #25015: Estimate of max trip count of loop=4
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dgbtrf.f(330,24)
<Peeled>
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dgbtrf.f(330,24)
   remark #15388: vectorization support: reference DX has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference DX has aligned access   [ dscal.f(94,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 4.040 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dgbtrf.f(330,24)
<Remainder>
   remark #15388: vectorization support: reference DX has aligned access   [ dscal.f(94,13) ]
   remark #15388: vectorization support: reference DX has aligned access   [ dscal.f(94,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dscal.f(93,10) inlined into dgbtrf.f(330,24)
<Remainder>
LOOP END

LOOP BEGIN at dger.f(195,14) inlined into dgbtrf.f(339,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dger.f(198,22) inlined into dgbtrf.f(339,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dger.f(198,22) inlined into dgbtrf.f(339,22)
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15389: vectorization support: reference X has unaligned access   [ dger.f(199,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dger.f(198,22) inlined into dgbtrf.f(339,22)
   <Remainder>
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15388: vectorization support: reference A has aligned access   [ dger.f(199,23) ]
      remark #15389: vectorization support: reference X has unaligned access   [ dger.f(199,23) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dger.f(198,22) inlined into dgbtrf.f(339,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(84,13) inlined into dgbtrf.f(355,19)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=6

   LOOP BEGIN at dcopy.f(84,13) inlined into dgbtrf.f(355,19)
   <Multiversioned v2>
      remark #15389: vectorization support: reference work31 has unaligned access   [ dcopy.f(85,16) ]
      remark #15389: vectorization support: reference DX has unaligned access   [ dcopy.f(85,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 3.500 
      remark #15478: estimated potential speedup: 0.880 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at dcopy.f(84,13) inlined into dgbtrf.f(355,19)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(90,10) inlined into dgbtrf.f(355,19)
   remark #25264: Loop rerolled by 7 
   remark #25402: memmove generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=9

   LOOP BEGIN at dcopy.f(90,10) inlined into dgbtrf.f(355,19)
   <Multiversioned v2>
      remark #15388: vectorization support: reference work31 has aligned access   [ dcopy.f(91,13) ]
      remark #15389: vectorization support: reference DX has unaligned access   [ dcopy.f(91,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 0.970 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=9
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgbtrf.f(355,19)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=9
   LOOP END
LOOP END

LOOP BEGIN at dlaswp.f(156,13) inlined into dgbtrf.f(368,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlaswp.f(158,16) inlined into dgbtrf.f(368,21)
   <Distributed chunk1>
      remark #25426: Loop Distributed (2 way) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dlaswp.f(161,22) inlined into dgbtrf.f(368,21)
         remark #15399: vectorization support: unroll factor set to 8
         remark #15300: LOOP WAS VECTORIZED
         remark #15460: masked strided loads: 2 
         remark #15462: unmasked indexed (or gather) loads: 2 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 11 
         remark #15477: vector loop cost: 76.000 
         remark #15478: estimated potential speedup: 1.130 
         remark #15479: lightweight vector operations: 6 
         remark #15480: medium-overhead vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=2
      LOOP END

      LOOP BEGIN at dlaswp.f(161,22) inlined into dgbtrf.f(368,21)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at dlaswp.f(158,16) inlined into dgbtrf.f(368,21)
   <Distributed chunk2>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15399: vectorization support: unroll factor set to 4
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 1 
      remark #15477: vector loop cost: 10.000 
      remark #15478: estimated potential speedup: 0.390 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 8  
   LOOP END

   LOOP BEGIN at dlaswp.f(158,16) inlined into dgbtrf.f(368,21)
   <Remainder, Distributed chunk2>
      remark #25436: completely unrolled by 7  
   LOOP END
LOOP END

LOOP BEGIN at dlaswp.f(174,13) inlined into dgbtrf.f(368,21)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlaswp.f(177,19) inlined into dgbtrf.f(368,21)
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15460: masked strided loads: 2 
      remark #15462: unmasked indexed (or gather) loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 38.000 
      remark #15478: estimated potential speedup: 1.150 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlaswp.f(177,19) inlined into dgbtrf.f(368,21)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbtrf.f(373,19)
<Peeled>
LOOP END

LOOP BEGIN at dgbtrf.f(373,19)
   remark #15388: vectorization support: reference ipiv has aligned access   [ dgbtrf.f(374,19) ]
   remark #15388: vectorization support: reference ipiv has aligned access   [ dgbtrf.f(374,19) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 3.240 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbtrf.f(373,19)
<Remainder>
LOOP END

LOOP BEGIN at dgbtrf.f(381,19)
   remark #15310: loop was not vectorized: operation cannot be vectorized   [ dgbtrf.f(383,22) ]

   LOOP BEGIN at dgbtrf.f(383,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between ab line 386 and ab line 388
      remark #15346: vector dependence: assumed FLOW dependence between ab line 388 and ab line 386
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dgbtrf.f(383,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbtrf.f(429,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=64

   LOOP BEGIN at dgbtrf.f(430,25)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=65

      LOOP BEGIN at dgbtrf.f(430,25)
      <Peeled, Multiversioned v2>
         remark #25015: Estimate of max trip count of loop=65
      LOOP END

      LOOP BEGIN at dgbtrf.f(430,25)
      <Multiversioned v2>
         remark #15388: vectorization support: reference work13 has aligned access   [ dgbtrf.f(431,25) ]
         remark #15389: vectorization support: reference ab has unaligned access   [ dgbtrf.f(431,25) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 1.540 
         remark #15479: lightweight vector operations: 2 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=16
      LOOP END

      LOOP BEGIN at dgbtrf.f(430,25)
      <Remainder, Multiversioned v2>
         remark #25015: Estimate of max trip count of loop=65
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgbtrf.f(462,22)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=64

   LOOP BEGIN at dgbtrf.f(463,25)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=65

      LOOP BEGIN at dgbtrf.f(463,25)
      <Peeled, Multiversioned v2>
         remark #25015: Estimate of max trip count of loop=65
      LOOP END

      LOOP BEGIN at dgbtrf.f(463,25)
      <Multiversioned v2>
         remark #15388: vectorization support: reference ab has aligned access   [ dgbtrf.f(464,25) ]
         remark #15389: vectorization support: reference work13 has unaligned access   [ dgbtrf.f(464,25) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.250 
         remark #15478: estimated potential speedup: 2.400 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=16
      LOOP END

      LOOP BEGIN at dgbtrf.f(463,25)
      <Remainder, Multiversioned v2>
         remark #25015: Estimate of max trip count of loop=65
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgbtrf.f(472,19)
<Peeled>
LOOP END

LOOP BEGIN at dgbtrf.f(472,19)
   remark #15388: vectorization support: reference ipiv has aligned access   [ dgbtrf.f(473,19) ]
   remark #15388: vectorization support: reference ipiv has aligned access   [ dgbtrf.f(473,19) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 1.750 
   remark #15478: estimated potential speedup: 3.240 
   remark #15479: lightweight vector operations: 7 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbtrf.f(472,19)
<Remainder>
LOOP END

LOOP BEGIN at dgbtrf.f(481,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=64

   LOOP BEGIN at dswap.f(85,13) inlined into dgbtrf.f(491,27)
      remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(86,16) ]
      remark #15389: vectorization support: reference DX has unaligned access   [ dswap.f(87,16) ]
      remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(87,16) ]
      remark #15389: vectorization support: reference DY has unaligned access   [ dswap.f(88,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15315: loop was not vectorized: low trip count
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 9.500 
      remark #15478: estimated potential speedup: 0.680 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=2
   LOOP END

   LOOP BEGIN at dswap.f(85,13) inlined into dgbtrf.f(491,27)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=2
   LOOP END

   LOOP BEGIN at dswap.f(93,10) inlined into dgbtrf.f(491,27)
      remark #25427: Loop Statements Reordered
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15460: masked strided loads: 6 
      remark #15462: unmasked indexed (or gather) loads: 6 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 32 
      remark #15477: vector loop cost: 40.500 
      remark #15478: estimated potential speedup: 0.780 
      remark #15479: lightweight vector operations: 24 
      remark #15480: medium-overhead vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dswap.f(113,10) inlined into dgbtrf.f(491,27)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between DX line 114 and DX line 115
      remark #15346: vector dependence: assumed FLOW dependence between DX line 115 and DX line 114
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dswap.f(113,10) inlined into dgbtrf.f(491,27)
   <Remainder>
   LOOP END

   LOOP BEGIN at dswap.f(113,10) inlined into dgbtrf.f(497,27)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between DX line 114 and DX line 115
      remark #15346: vector dependence: assumed FLOW dependence between DX line 115 and DX line 114
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at dswap.f(113,10) inlined into dgbtrf.f(497,27)
   <Remainder>
   LOOP END

   LOOP BEGIN at dcopy.f(84,13) inlined into dgbtrf.f(506,19)
      remark #25401: memcopy(with guard) generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
      remark #25015: Estimate of max trip count of loop=6

      LOOP BEGIN at dcopy.f(84,13) inlined into dgbtrf.f(506,19)
      <Multiversioned v2>
         remark #15389: vectorization support: reference DY has unaligned access   [ dcopy.f(85,16) ]
         remark #15389: vectorization support: reference work31 has unaligned access   [ dcopy.f(85,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 3.500 
         remark #15478: estimated potential speedup: 0.880 
         remark #15479: lightweight vector operations: 1 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at dcopy.f(84,13) inlined into dgbtrf.f(506,19)
      <Remainder, Multiversioned v2>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgbtrf.f(506,19)
      remark #25264: Loop rerolled by 7 
      remark #25402: memmove generated
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=9

      LOOP BEGIN at dcopy.f(90,10) inlined into dgbtrf.f(506,19)
      <Peeled, Multiversioned v2>
         remark #25015: Estimate of max trip count of loop=9
      LOOP END

      LOOP BEGIN at dcopy.f(90,10) inlined into dgbtrf.f(506,19)
      <Multiversioned v2>
         remark #15388: vectorization support: reference DY has aligned access   [ dcopy.f(91,13) ]
         remark #15389: vectorization support: reference work31 has unaligned access   [ dcopy.f(91,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 2.000 
         remark #15478: estimated potential speedup: 1.090 
         remark #15479: lightweight vector operations: 1 
         remark #15480: medium-overhead vector operations: 2 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=4
      LOOP END

      LOOP BEGIN at dcopy.f(90,10) inlined into dgbtrf.f(506,19)
      <Remainder, Multiversioned v2>
         remark #25015: Estimate of max trip count of loop=9
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at dgbtrf.f(268,13)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at dgbtrf.f(290,16)
      remark #15529: loop was not vectorized: volatile assignment was not vectorized. Try using non-volatile assignment.   [ dger.f(131,18) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DGEMM..0

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgemm.f(281,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(282,22)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(282,22)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(282,22)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(283,23) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(282,22)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(287,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(288,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(303,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(305,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(305,26)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(305,26)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(306,27) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(305,26)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgemm.f(313,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(316,30)
      <Peeled>
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(317,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
      <Remainder>
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(317,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(326,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(327,22)
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(333,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(335,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(335,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15479: lightweight vector operations: 27 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at dgemm.f(329,26)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemm.f(330,27) ]
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(327,22)
   <Remainder>

      LOOP BEGIN at dgemm.f(329,26)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(345,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(347,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(347,26)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(347,26)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(348,27) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(347,26)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgemm.f(355,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(358,30)
      <Peeled>
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(359,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
      <Remainder>
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(359,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(368,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(369,22)
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(375,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(377,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(377,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15479: lightweight vector operations: 27 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at dgemm.f(371,26)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemm.f(372,27) ]
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(369,22)
   <Remainder>

      LOOP BEGIN at dgemm.f(371,26)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DGEMM..1

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgemm.f(281,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(282,22)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(282,22)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(282,22)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(283,23) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(282,22)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(287,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(288,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(303,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(305,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(305,26)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(305,26)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(306,27) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(305,26)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgemm.f(313,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(316,30)
      <Peeled>
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(317,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
      <Remainder>
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(317,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(326,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(327,22)
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(333,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(335,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(335,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15479: lightweight vector operations: 27 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at dgemm.f(329,26)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemm.f(330,27) ]
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(327,22)
   <Remainder>

      LOOP BEGIN at dgemm.f(329,26)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(345,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(347,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(347,26)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(347,26)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(348,27) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(347,26)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgemm.f(355,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(358,30)
      <Peeled>
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(359,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
      <Remainder>
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(359,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(368,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(369,22)
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(375,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(377,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(377,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15479: lightweight vector operations: 27 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at dgemm.f(371,26)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemm.f(372,27) ]
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(369,22)
   <Remainder>

      LOOP BEGIN at dgemm.f(371,26)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DGEMM..2

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgemm.f(281,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(282,22)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(282,22)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(282,22)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(283,23) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(282,22)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(287,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(288,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(303,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(305,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(305,26)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(305,26)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(306,27) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(305,26)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgemm.f(313,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(316,30)
      <Peeled>
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(317,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
      <Remainder>
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(317,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(326,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(327,22)
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(333,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(335,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(335,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15479: lightweight vector operations: 27 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at dgemm.f(329,26)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemm.f(330,27) ]
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(327,22)
   <Remainder>

      LOOP BEGIN at dgemm.f(329,26)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(345,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(347,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(347,26)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(347,26)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(348,27) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(347,26)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgemm.f(355,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(358,30)
      <Peeled>
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(359,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
      <Remainder>
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(359,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(368,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(369,22)
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(375,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(377,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(377,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15479: lightweight vector operations: 27 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at dgemm.f(371,26)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemm.f(372,27) ]
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(369,22)
   <Remainder>

      LOOP BEGIN at dgemm.f(371,26)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DGEMM..3

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgemm.f(281,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(282,22)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(282,22)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(282,22)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(283,23) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(282,22)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(287,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(288,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(303,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(305,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(305,26)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(305,26)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(306,27) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(305,26)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgemm.f(313,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(316,30)
      <Peeled>
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(317,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
      <Remainder>
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(317,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(326,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(327,22)
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(333,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(335,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(335,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15479: lightweight vector operations: 27 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at dgemm.f(329,26)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemm.f(330,27) ]
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(327,22)
   <Remainder>

      LOOP BEGIN at dgemm.f(329,26)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(345,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(347,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(347,26)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(347,26)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(348,27) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(347,26)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgemm.f(355,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(358,30)
      <Peeled>
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(359,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
      <Remainder>
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(359,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(368,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(369,22)
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(375,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(377,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(377,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15479: lightweight vector operations: 27 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at dgemm.f(371,26)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemm.f(372,27) ]
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(369,22)
   <Remainder>

      LOOP BEGIN at dgemm.f(371,26)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ILAENV..1

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at ilaenv.f(213,16)
   remark #15389: vectorization support: reference subnam has unaligned access   [ ilaenv.f(214,16) ]
   remark #15389: vectorization support: reference subnam has unaligned access   [ ilaenv.f(216,19) ]
   remark #15389: vectorization support: reference subnam has unaligned access   [ ilaenv.f(216,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 15.750 
   remark #15478: estimated potential speedup: 0.910 
   remark #15479: lightweight vector operations: 37 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25436: completely unrolled by 5  
LOOP END
===========================================================================

Begin optimization report for: DGBSVX

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgbsvx.f(458,16)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbsvx.f(459,16) ]
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at dgbsvx.f(458,16)
<Remainder>
LOOP END

LOOP BEGIN at dgbsvx.f(473,16)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbsvx.f(474,16) ]
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at dgbsvx.f(473,16)
<Remainder>
LOOP END

LOOP BEGIN at dlaqgb.f(221,16) inlined into dgbsvx.f(509,18)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dlaqgb.f(223,19) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlaqgb.f(223,19) inlined into dgbsvx.f(509,18)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlaqgb.f(223,19) inlined into dgbsvx.f(509,18)
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(224,19) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(224,19) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlaqgb.f(223,19) inlined into dgbsvx.f(509,18)
   <Remainder>
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(224,19) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(224,19) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlaqgb.f(223,19) inlined into dgbsvx.f(509,18)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlaqgb.f(233,13) inlined into dgbsvx.f(509,18)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dlaqgb.f(234,16) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlaqgb.f(234,16) inlined into dgbsvx.f(509,18)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlaqgb.f(234,16) inlined into dgbsvx.f(509,18)
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(235,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dlaqgb.f(235,16) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(235,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.050 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlaqgb.f(234,16) inlined into dgbsvx.f(509,18)
   <Remainder>
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(235,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dlaqgb.f(235,16) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(235,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlaqgb.f(234,16) inlined into dgbsvx.f(509,18)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dlaqgb.f(243,13) inlined into dgbsvx.f(509,18)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dlaqgb.f(245,16) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlaqgb.f(245,16) inlined into dgbsvx.f(509,18)
   <Peeled>
   LOOP END

   LOOP BEGIN at dlaqgb.f(245,16) inlined into dgbsvx.f(509,18)
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(246,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dlaqgb.f(246,16) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(246,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 13.000 
      remark #15478: estimated potential speedup: 2.540 
      remark #15479: lightweight vector operations: 6 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dlaqgb.f(245,16) inlined into dgbsvx.f(509,18)
   <Remainder>
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(246,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dlaqgb.f(246,16) ]
      remark #15388: vectorization support: reference ab has aligned access   [ dlaqgb.f(246,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dlaqgb.f(245,16) inlined into dgbsvx.f(509,18)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbsvx.f(520,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbsvx.f(521,19)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgbsvx.f(521,19)
      remark #15388: vectorization support: reference b has aligned access   [ dgbsvx.f(522,19) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dgbsvx.f(522,19) ]
      remark #15388: vectorization support: reference b has aligned access   [ dgbsvx.f(522,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.050 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbsvx.f(521,19)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dgbsvx.f(522,19) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dgbsvx.f(522,19) ]
      remark #15388: vectorization support: reference b has aligned access   [ dgbsvx.f(522,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgbsvx.f(521,19)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbsvx.f(527,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbsvx.f(528,16)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgbsvx.f(528,16)
      remark #15388: vectorization support: reference b has aligned access   [ dgbsvx.f(529,16) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgbsvx.f(529,16) ]
      remark #15388: vectorization support: reference b has aligned access   [ dgbsvx.f(529,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.050 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbsvx.f(528,16)
   <Remainder>
      remark #15388: vectorization support: reference b has aligned access   [ dgbsvx.f(529,16) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgbsvx.f(529,16) ]
      remark #15388: vectorization support: reference b has aligned access   [ dgbsvx.f(529,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgbsvx.f(528,16)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbsvx.f(538,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dcopy.f(84,13) inlined into dgbsvx.f(541,18)
      remark #25401: memcopy(with guard) generated
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
      remark #25015: Estimate of max trip count of loop=6

      LOOP BEGIN at dcopy.f(84,13) inlined into dgbsvx.f(541,18)
      <Multiversioned v2>
         remark #15389: vectorization support: reference DY has unaligned access   [ dcopy.f(85,16) ]
         remark #15389: vectorization support: reference DX has unaligned access   [ dcopy.f(85,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 4.000 
         remark #15478: estimated potential speedup: 0.800 
         remark #15479: lightweight vector operations: 1 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
         remark #25439: unrolled with remainder by 2  
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at dcopy.f(84,13) inlined into dgbsvx.f(541,18)
      <Remainder, Multiversioned v2>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgbsvx.f(541,18)
      remark #25264: Loop rerolled by 7 
      remark #25402: memmove generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dcopy.f(90,10) inlined into dgbsvx.f(541,18)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at dcopy.f(90,10) inlined into dgbsvx.f(541,18)
      <Multiversioned v2>
         remark #15388: vectorization support: reference DY has aligned access   [ dcopy.f(91,13) ]
         remark #15389: vectorization support: reference DX has unaligned access   [ dcopy.f(91,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 1.720 
         remark #15479: lightweight vector operations: 2 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dcopy.f(90,10) inlined into dgbsvx.f(541,18)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgbsvx.f(555,16)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ dgbsvx.f(556,19) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between anorm line 557 and anorm line 557
   remark #15346: vector dependence: assumed OUTPUT dependence between anorm line 557 and anorm line 557

   LOOP BEGIN at dgbsvx.f(556,19)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ dgbsvx.f(557,19) ]
      remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgbsvx.f(557,19) ]
   LOOP END
LOOP END

LOOP BEGIN at dlacpy.f(146,13) inlined into dgbsvx.f(597,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlacpy.f(147,16) inlined into dgbsvx.f(597,12)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dlacpy.f(147,16) inlined into dgbsvx.f(597,12)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at dlacpy.f(147,16) inlined into dgbsvx.f(597,12)
      <Multiversioned v2>
         remark #15388: vectorization support: reference x has aligned access   [ dlacpy.f(148,16) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dlacpy.f(148,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 1.720 
         remark #15479: lightweight vector operations: 2 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dlacpy.f(147,16) inlined into dgbsvx.f(597,12)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgbsvx.f(612,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbsvx.f(613,19)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgbsvx.f(613,19)
      remark #15388: vectorization support: reference x has aligned access   [ dgbsvx.f(614,19) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgbsvx.f(614,19) ]
      remark #15388: vectorization support: reference x has aligned access   [ dgbsvx.f(614,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.050 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbsvx.f(613,19)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dgbsvx.f(614,19) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgbsvx.f(614,19) ]
      remark #15388: vectorization support: reference x has aligned access   [ dgbsvx.f(614,19) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgbsvx.f(613,19)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbsvx.f(617,16)
<Peeled>
LOOP END

LOOP BEGIN at dgbsvx.f(617,16)
   remark #15388: vectorization support: reference ferr has aligned access   [ dgbsvx.f(618,16) ]
   remark #15388: vectorization support: reference ferr has aligned access   [ dgbsvx.f(618,16) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 35.000 
   remark #15478: estimated potential speedup: 3.110 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbsvx.f(617,16)
<Remainder>
   remark #15388: vectorization support: reference ferr has aligned access   [ dgbsvx.f(618,16) ]
   remark #15388: vectorization support: reference ferr has aligned access   [ dgbsvx.f(618,16) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgbsvx.f(617,16)
<Remainder>
LOOP END

LOOP BEGIN at dgbsvx.f(622,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgbsvx.f(623,16)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgbsvx.f(623,16)
      remark #15388: vectorization support: reference x has aligned access   [ dgbsvx.f(624,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dgbsvx.f(624,16) ]
      remark #15388: vectorization support: reference x has aligned access   [ dgbsvx.f(624,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 11.000 
      remark #15478: estimated potential speedup: 2.050 
      remark #15479: lightweight vector operations: 4 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgbsvx.f(623,16)
   <Remainder>
      remark #15388: vectorization support: reference x has aligned access   [ dgbsvx.f(624,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ dgbsvx.f(624,16) ]
      remark #15388: vectorization support: reference x has aligned access   [ dgbsvx.f(624,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgbsvx.f(623,16)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgbsvx.f(627,13)
<Peeled>
LOOP END

LOOP BEGIN at dgbsvx.f(627,13)
   remark #15388: vectorization support: reference ferr has aligned access   [ dgbsvx.f(628,13) ]
   remark #15388: vectorization support: reference ferr has aligned access   [ dgbsvx.f(628,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 35.000 
   remark #15478: estimated potential speedup: 3.110 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgbsvx.f(627,13)
<Remainder>
   remark #15388: vectorization support: reference ferr has aligned access   [ dgbsvx.f(628,13) ]
   remark #15388: vectorization support: reference ferr has aligned access   [ dgbsvx.f(628,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgbsvx.f(627,13)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: DLACN2

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlacn2.f(179,13)
<Peeled>
LOOP END

LOOP BEGIN at dlacn2.f(179,13)
   remark #15388: vectorization support: reference x has aligned access   [ dlacn2.f(180,13) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 31 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 16.030 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dlacn2.f(179,13)
<Remainder>
   remark #15388: vectorization support: reference x has aligned access   [ dlacn2.f(180,13) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dlacn2.f(179,13)
<Remainder>
LOOP END

LOOP BEGIN at dasum.f(86,13) inlined into dlacn2.f(282,20)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(87,16) ]
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=5
LOOP END

LOOP BEGIN at dasum.f(86,13) inlined into dlacn2.f(282,20)
<Remainder>
   remark #25015: Estimate of max trip count of loop=5
LOOP END

LOOP BEGIN at dasum.f(95,10) inlined into dlacn2.f(282,20)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(96,13) ]
LOOP END

LOOP BEGIN at dcopy.f(84,13) inlined into dlacn2.f(284,15)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=6

   LOOP BEGIN at dcopy.f(84,13) inlined into dlacn2.f(284,15)
   <Multiversioned v2>
      remark #15389: vectorization support: reference v has unaligned access   [ dcopy.f(85,16) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dcopy.f(85,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.800 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at dcopy.f(84,13) inlined into dlacn2.f(284,15)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(90,10) inlined into dlacn2.f(284,15)
   remark #25264: Loop rerolled by 7 
   remark #25402: memmove generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dcopy.f(90,10) inlined into dlacn2.f(284,15)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dlacn2.f(284,15)
   <Multiversioned v2>
      remark #15388: vectorization support: reference v has aligned access   [ dcopy.f(91,13) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dcopy.f(91,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.250 
      remark #15478: estimated potential speedup: 1.720 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dlacn2.f(284,15)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dlacn2.f(259,20)
   remark #15385: vectorization support: unsupported reduction    [ idamax.f(85,28) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(85,28) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dlacn2.f(259,20)
<Remainder>
LOOP END

LOOP BEGIN at dlacn2.f(270,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between altsgn line 272 and altsgn line 271
   remark #15346: vector dependence: assumed ANTI dependence between altsgn line 271 and altsgn line 272
LOOP END

LOOP BEGIN at dcopy.f(84,13) inlined into dlacn2.f(231,12)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=6

   LOOP BEGIN at dcopy.f(84,13) inlined into dlacn2.f(231,12)
   <Multiversioned v2>
      remark #15389: vectorization support: reference v has unaligned access   [ dcopy.f(85,16) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dcopy.f(85,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.800 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at dcopy.f(84,13) inlined into dlacn2.f(231,12)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(90,10) inlined into dlacn2.f(231,12)
   remark #25264: Loop rerolled by 7 
   remark #25402: memmove generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dcopy.f(90,10) inlined into dlacn2.f(231,12)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dlacn2.f(231,12)
   <Multiversioned v2>
      remark #15388: vectorization support: reference v has aligned access   [ dcopy.f(91,13) ]
      remark #15389: vectorization support: reference x has unaligned access   [ dcopy.f(91,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.250 
      remark #15478: estimated potential speedup: 1.720 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dlacn2.f(231,12)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dasum.f(86,13) inlined into dlacn2.f(233,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(87,16) ]
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=5
LOOP END

LOOP BEGIN at dasum.f(86,13) inlined into dlacn2.f(233,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=5
LOOP END

LOOP BEGIN at dasum.f(95,10) inlined into dlacn2.f(233,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(96,13) ]
LOOP END

LOOP BEGIN at dlacn2.f(246,10)
<Peeled, Distributed chunk1>
LOOP END

LOOP BEGIN at dlacn2.f(246,10)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15388: vectorization support: reference x has aligned access   [ dlacn2.f(247,10) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 5.510 
   remark #15479: lightweight vector operations: 10 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dlacn2.f(246,10)
<Remainder, Distributed chunk1>
   remark #15388: vectorization support: reference x has aligned access   [ dlacn2.f(247,10) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dlacn2.f(246,10)
<Remainder, Distributed chunk1>
LOOP END

LOOP BEGIN at dlacn2.f(246,10)
<Distributed chunk2>
   remark #15388: vectorization support: reference x has aligned access   [ dlacn2.f(248,22) ]
   remark #15389: vectorization support: reference isgn has unaligned access   [ dlacn2.f(248,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 108 
   remark #15477: vector loop cost: 456.000 
   remark #15478: estimated potential speedup: 0.940 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15485: serialized function calls: 1
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #15489: --- begin vector function matching report ---
   remark #15490: Function call: f_ldnint_val with simdlen=2, actual parameter types: (vector)   [ dlacn2.f(248,22) ]
   remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
   remark #15493: --- end vector function matching report ---
LOOP END

LOOP BEGIN at dlacn2.f(219,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlacn2.f(219,10)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dlacn2.f(219,10)
      remark #15388: vectorization support: reference x has aligned access   [ dlacn2.f(220,10) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dlacn2.f(219,10)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dlacn2.f(213,20)
   remark #15385: vectorization support: unsupported reduction    [ idamax.f(85,28) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(85,28) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at idamax.f(84,10) inlined into dlacn2.f(213,20)
<Remainder>
LOOP END

LOOP BEGIN at dasum.f(86,13) inlined into dlacn2.f(199,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(87,16) ]
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=5
LOOP END

LOOP BEGIN at dasum.f(86,13) inlined into dlacn2.f(199,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=5
LOOP END

LOOP BEGIN at dasum.f(95,10) inlined into dlacn2.f(199,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(96,13) ]
LOOP END

LOOP BEGIN at dlacn2.f(201,10)
<Peeled, Distributed chunk1>
LOOP END

LOOP BEGIN at dlacn2.f(201,10)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15388: vectorization support: reference x has aligned access   [ dlacn2.f(202,10) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 24 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 5.510 
   remark #15479: lightweight vector operations: 10 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dlacn2.f(201,10)
<Remainder, Distributed chunk1>
   remark #15388: vectorization support: reference x has aligned access   [ dlacn2.f(202,10) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dlacn2.f(201,10)
<Remainder, Distributed chunk1>
LOOP END

LOOP BEGIN at dlacn2.f(201,10)
<Distributed chunk2>
   remark #15388: vectorization support: reference x has aligned access   [ dlacn2.f(203,22) ]
   remark #15389: vectorization support: reference isgn has unaligned access   [ dlacn2.f(203,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15399: vectorization support: unroll factor set to 4
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 108 
   remark #15477: vector loop cost: 456.000 
   remark #15478: estimated potential speedup: 0.940 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15485: serialized function calls: 1
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #15489: --- begin vector function matching report ---
   remark #15490: Function call: f_ldnint_val with simdlen=2, actual parameter types: (vector)   [ dlacn2.f(203,22) ]
   remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
   remark #15493: --- end vector function matching report ---
LOOP END


Non-optimizable loops:


LOOP BEGIN at dlacn2.f(234,10)
   remark #15341: loop was not vectorized: nonstandard loop is not a vectorization candidate
LOOP END
===========================================================================

Begin optimization report for: DASUM..0

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dasum.f(86,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(87,16) ]
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=5
LOOP END

LOOP BEGIN at dasum.f(86,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=5
LOOP END

LOOP BEGIN at dasum.f(95,10)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(96,13) ]
LOOP END
===========================================================================

Begin optimization report for: DGTSVX

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dcopy.f(84,13) inlined into dgtsvx.f(364,15)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=6

   LOOP BEGIN at dcopy.f(84,13) inlined into dgtsvx.f(364,15)
   <Multiversioned v2>
      remark #15389: vectorization support: reference df has unaligned access   [ dcopy.f(85,16) ]
      remark #15389: vectorization support: reference d has unaligned access   [ dcopy.f(85,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.800 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at dcopy.f(84,13) inlined into dgtsvx.f(364,15)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(364,15)
   remark #25264: Loop rerolled by 7 
   remark #25402: memmove generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(364,15)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(364,15)
   <Multiversioned v2>
      remark #15388: vectorization support: reference df has aligned access   [ dcopy.f(91,13) ]
      remark #15389: vectorization support: reference d has unaligned access   [ dcopy.f(91,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.250 
      remark #15478: estimated potential speedup: 1.720 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(364,15)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(84,13) inlined into dgtsvx.f(366,18)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=6

   LOOP BEGIN at dcopy.f(84,13) inlined into dgtsvx.f(366,18)
   <Multiversioned v2>
      remark #15389: vectorization support: reference dlf has unaligned access   [ dcopy.f(85,16) ]
      remark #15389: vectorization support: reference dl has unaligned access   [ dcopy.f(85,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.800 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at dcopy.f(84,13) inlined into dgtsvx.f(366,18)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(366,18)
   remark #25264: Loop rerolled by 7 
   remark #25402: memmove generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(366,18)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(366,18)
   <Multiversioned v2>
      remark #15388: vectorization support: reference dlf has aligned access   [ dcopy.f(91,13) ]
      remark #15389: vectorization support: reference dl has unaligned access   [ dcopy.f(91,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.250 
      remark #15478: estimated potential speedup: 1.720 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(366,18)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(84,13) inlined into dgtsvx.f(367,18)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=6

   LOOP BEGIN at dcopy.f(84,13) inlined into dgtsvx.f(367,18)
   <Multiversioned v2>
      remark #15389: vectorization support: reference duf has unaligned access   [ dcopy.f(85,16) ]
      remark #15389: vectorization support: reference du has unaligned access   [ dcopy.f(85,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.800 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at dcopy.f(84,13) inlined into dgtsvx.f(367,18)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(367,18)
   remark #25264: Loop rerolled by 7 
   remark #25402: memmove generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(367,18)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(367,18)
   <Multiversioned v2>
      remark #15388: vectorization support: reference duf has aligned access   [ dcopy.f(91,13) ]
      remark #15389: vectorization support: reference du has unaligned access   [ dcopy.f(91,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.250 
      remark #15478: estimated potential speedup: 1.720 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtsvx.f(367,18)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dlacpy.f(146,13) inlined into dgtsvx.f(395,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlacpy.f(147,16) inlined into dgtsvx.f(395,12)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dlacpy.f(147,16) inlined into dgtsvx.f(395,12)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at dlacpy.f(147,16) inlined into dgtsvx.f(395,12)
      <Multiversioned v2>
         remark #15388: vectorization support: reference x has aligned access   [ dlacpy.f(148,16) ]
         remark #15389: vectorization support: reference b has unaligned access   [ dlacpy.f(148,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 1.720 
         remark #15479: lightweight vector operations: 2 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dlacpy.f(147,16) inlined into dgtsvx.f(395,12)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgttrs.f(214,13) inlined into dgtsvx.f(396,12)
   remark #15382: vectorization support: call to function DGTTS2 cannot be vectorized   [ dgttrs.f(216,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between JB line 215 and JB line 216
   remark #15346: vector dependence: assumed OUTPUT dependence between JB line 216 and JB line 215
LOOP END
===========================================================================

Begin optimization report for: DGTTRF

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgttrf.f(172,10)
<Peeled>
LOOP END

LOOP BEGIN at dgttrf.f(172,10)
   remark #15388: vectorization support: reference ipiv has aligned access   [ dgttrf.f(173,10) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 2 
   remark #15477: vector loop cost: 0.750 
   remark #15478: estimated potential speedup: 2.480 
   remark #15479: lightweight vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgttrf.f(172,10)
<Remainder>
LOOP END

LOOP BEGIN at dgttrf.f(175,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgttrf.f(175,10)
   <Peeled>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END

   LOOP BEGIN at dgttrf.f(175,10)
      remark #15388: vectorization support: reference du2 has aligned access   [ dgttrf.f(176,10) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 1.500 
      remark #15479: lightweight vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at dgttrf.f(175,10)
   <Remainder>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at dgttrf.f(179,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between d line 187 and d line 194
LOOP END

LOOP BEGIN at dgttrf.f(225,10)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END
===========================================================================

Begin optimization report for: DGTRFS

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dcopy.f(84,13) inlined into dgtrfs.f(322,15)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=6

   LOOP BEGIN at dcopy.f(84,13) inlined into dgtrfs.f(322,15)
   <Multiversioned v2>
      remark #15389: vectorization support: reference DY has unaligned access   [ dcopy.f(85,16) ]
      remark #15389: vectorization support: reference DX has unaligned access   [ dcopy.f(85,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.800 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at dcopy.f(84,13) inlined into dgtrfs.f(322,15)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(90,10) inlined into dgtrfs.f(322,15)
   remark #25264: Loop rerolled by 7 
   remark #25402: memmove generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtrfs.f(322,15)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtrfs.f(322,15)
   <Multiversioned v2>
      remark #15388: vectorization support: reference DY has aligned access   [ dcopy.f(91,13) ]
      remark #15389: vectorization support: reference DX has unaligned access   [ dcopy.f(91,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.250 
      remark #15478: estimated potential speedup: 1.720 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dcopy.f(90,10) inlined into dgtrfs.f(322,15)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dgtrfs.f(335,19)
<Peeled>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at dgtrfs.f(335,19)
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference b has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference dl has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference d has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference du has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 7 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 35 
   remark #15477: vector loop cost: 61.000 
   remark #15478: estimated potential speedup: 2.160 
   remark #15479: lightweight vector operations: 18 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtrfs.f(335,19)
<Remainder>
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference b has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference dl has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference d has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference du has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(336,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgtrfs.f(335,19)
<Remainder>
LOOP END

LOOP BEGIN at dgtrfs.f(351,19)
<Peeled>
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at dgtrfs.f(351,19)
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference b has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference du has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference d has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference dl has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 7 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 35 
   remark #15477: vector loop cost: 61.000 
   remark #15478: estimated potential speedup: 2.160 
   remark #15479: lightweight vector operations: 18 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtrfs.f(351,19)
<Remainder>
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference b has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference du has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference d has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference dl has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15389: vectorization support: reference x has unaligned access   [ dgtrfs.f(352,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgtrfs.f(351,19)
<Remainder>
LOOP END

LOOP BEGIN at dgtrfs.f(373,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between s line 377 and s line 375
   remark #15346: vector dependence: assumed ANTI dependence between s line 375 and s line 377
   remark #15346: vector dependence: assumed ANTI dependence between s line 375 and s line 375
   remark #15346: vector dependence: assumed FLOW dependence between s line 375 and s line 375
   remark #15346: vector dependence: assumed FLOW dependence between s line 375 and s line 375
   remark #15346: vector dependence: assumed ANTI dependence between s line 375 and s line 375
   remark #15346: vector dependence: assumed ANTI dependence between s line 375 and s line 377
   remark #15346: vector dependence: assumed FLOW dependence between s line 377 and s line 375
LOOP END

LOOP BEGIN at daxpy.f(87,13) inlined into dgtrfs.f(396,18)
   remark #15389: vectorization support: reference DY has unaligned access   [ daxpy.f(88,16) ]
   remark #15389: vectorization support: reference DY has unaligned access   [ daxpy.f(88,16) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ daxpy.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15315: loop was not vectorized: low trip count
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 6.000 
   remark #15478: estimated potential speedup: 0.660 
   remark #15479: lightweight vector operations: 2 
   remark #15480: medium-overhead vector operations: 2 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at daxpy.f(87,13) inlined into dgtrfs.f(396,18)
<Remainder>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at daxpy.f(93,10) inlined into dgtrfs.f(396,18)
<Peeled>
LOOP END

LOOP BEGIN at daxpy.f(93,10) inlined into dgtrfs.f(396,18)
   remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
   remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ daxpy.f(94,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 11.000 
   remark #15478: estimated potential speedup: 2.050 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at daxpy.f(93,10) inlined into dgtrfs.f(396,18)
<Remainder>
   remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
   remark #15388: vectorization support: reference DY has aligned access   [ daxpy.f(94,13) ]
   remark #15389: vectorization support: reference DX has unaligned access   [ daxpy.f(94,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at daxpy.f(93,10) inlined into dgtrfs.f(396,18)
<Remainder>
LOOP END

LOOP BEGIN at dgtrfs.f(424,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between work line 426 and work line 428
   remark #15346: vector dependence: assumed ANTI dependence between work line 428 and work line 426
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Peeled, Multiversioned v1>
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Multiversioned v1>
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 4.070 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Remainder, Multiversioned v1>
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Peeled, Multiversioned v1>
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Multiversioned v1>
   remark #25230: Loop multiversioned for Same base arrays
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15389: vectorization support: reference work has unaligned access   [ dgtrfs.f(444,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 11.000 
   remark #15478: estimated potential speedup: 2.050 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Remainder, Multiversioned v1>
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15389: vectorization support: reference work has unaligned access   [ dgtrfs.f(444,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Peeled, Multiversioned v3>
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Multiversioned v3>
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15389: vectorization support: reference work has unaligned access   [ dgtrfs.f(444,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(444,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 11.000 
   remark #15478: estimated potential speedup: 2.050 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtrfs.f(443,19)
<Remainder, Multiversioned v3>
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Peeled, Multiversioned v1>
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Multiversioned v1>
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 5.000 
   remark #15478: estimated potential speedup: 4.070 
   remark #15479: lightweight vector operations: 5 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Remainder, Multiversioned v1>
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Peeled, Multiversioned v1>
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Multiversioned v1>
   remark #25230: Loop multiversioned for Same base arrays
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15389: vectorization support: reference work has unaligned access   [ dgtrfs.f(451,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 11.000 
   remark #15478: estimated potential speedup: 2.050 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Remainder, Multiversioned v1>
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15389: vectorization support: reference work has unaligned access   [ dgtrfs.f(451,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Peeled, Multiversioned v3>
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Multiversioned v3>
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15389: vectorization support: reference work has unaligned access   [ dgtrfs.f(451,19) ]
   remark #15388: vectorization support: reference work has aligned access   [ dgtrfs.f(451,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 6 
   remark #15477: vector loop cost: 11.000 
   remark #15478: estimated potential speedup: 2.050 
   remark #15479: lightweight vector operations: 4 
   remark #15480: medium-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtrfs.f(450,19)
<Remainder, Multiversioned v3>
LOOP END

LOOP BEGIN at dgtrfs.f(462,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgtrfs.f(463,13) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dgtrfs.f(462,13)
<Remainder>
LOOP END

LOOP BEGIN at dgtrfs.f(286,13)
<Peeled>
LOOP END

LOOP BEGIN at dgtrfs.f(286,13)
   remark #15389: vectorization support: reference ferr has unaligned access   [ dgtrfs.f(287,13) ]
   remark #15388: vectorization support: reference berr has aligned access   [ dgtrfs.f(288,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 7 
   remark #15477: vector loop cost: 14.000 
   remark #15478: estimated potential speedup: 1.900 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtrfs.f(286,13)
<Remainder>
   remark #15389: vectorization support: reference ferr has unaligned access   [ dgtrfs.f(287,13) ]
   remark #15388: vectorization support: reference berr has aligned access   [ dgtrfs.f(288,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgtrfs.f(286,13)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at dgtrfs.f(311,10)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.

   LOOP BEGIN at dgtrfs.f(398,13)
      remark #15529: loop was not vectorized: volatile assignment was not vectorized. Try using non-volatile assignment.   [ dgttrs.f(138,18) ]
   LOOP END

   LOOP BEGIN at dgtrfs.f(436,18)
      remark #15529: loop was not vectorized: volatile assignment was not vectorized. Try using non-volatile assignment.   [ dgttrs.f(138,18) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DGTTS2

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgtts2.f(168,16)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at dgtts2.f(168,16)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between b line 170 and b line 172
      remark #15346: vector dependence: assumed FLOW dependence between b line 172 and b line 170
   LOOP END

   LOOP BEGIN at dgtts2.f(181,16)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between b line 182 and b line 182
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END
LOOP END

LOOP BEGIN at dgtts2.f(190,16)
<Distributed chunk1>
   remark #25426: Loop Distributed (4 way) 
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 5 
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 34 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 1.690 
   remark #15479: lightweight vector operations: 21 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at dgtts2.f(194,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between b line 196 and b line 200
   LOOP END
LOOP END

LOOP BEGIN at dgtts2.f(190,16)
<Remainder, Distributed chunk1>

   LOOP BEGIN at dgtts2.f(194,19)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at dgtts2.f(190,16)
<Distributed chunk2>
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 51.000 
   remark #15478: estimated potential speedup: 2.220 
   remark #15479: lightweight vector operations: 3 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtts2.f(190,16)
<Remainder, Distributed chunk2>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgtts2.f(190,16)
<Remainder, Distributed chunk2>
LOOP END

LOOP BEGIN at dgtts2.f(190,16)
<Distributed chunk3, Predicate Optimized v1>
   remark #25422: Invariant Condition at line 207 hoisted out of this loop
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 36 
   remark #15477: vector loop cost: 62.000 
   remark #15478: estimated potential speedup: 2.200 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtts2.f(190,16)
<Remainder, Distributed chunk3, Predicate Optimized v1>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgtts2.f(190,16)
<Remainder, Distributed chunk3, Predicate Optimized v1>
LOOP END

LOOP BEGIN at dgtts2.f(190,16)
<Distributed chunk4>
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 3 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 41 
   remark #15477: vector loop cost: 18.500 
   remark #15478: estimated potential speedup: 2.200 
   remark #15479: lightweight vector operations: 11 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at dgtts2.f(210,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between b line 211 and b line 211
   LOOP END
LOOP END

LOOP BEGIN at dgtts2.f(190,16)
<Remainder, Distributed chunk4>

   LOOP BEGIN at dgtts2.f(210,19)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END
LOOP END

LOOP BEGIN at dgtts2.f(226,37)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form.

   LOOP BEGIN at dgtts2.f(229,16)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between b line 230 and b line 230
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at dgtts2.f(236,16)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between b line 238 and b line 240
      remark #15346: vector dependence: assumed FLOW dependence between b line 240 and b line 238
   LOOP END
LOOP END

LOOP BEGIN at dgtts2.f(248,16)
   remark #15301: OUTER LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 10 
   remark #15462: unmasked indexed (or gather) loads: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 160 
   remark #15477: vector loop cost: 75.250 
   remark #15478: estimated potential speedup: 2.120 
   remark #15479: lightweight vector operations: 50 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at dgtts2.f(255,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between b line 256 and b line 256
   LOOP END

   LOOP BEGIN at dgtts2.f(259,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between b line 261 and b line 264
   LOOP END
LOOP END

LOOP BEGIN at dgtts2.f(248,16)
<Remainder>

   LOOP BEGIN at dgtts2.f(255,19)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at dgtts2.f(259,19)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ILAENV..0

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at ilaenv.f(213,16)
   remark #15389: vectorization support: reference subnam has unaligned access   [ ilaenv.f(214,16) ]
   remark #15389: vectorization support: reference subnam has unaligned access   [ ilaenv.f(216,19) ]
   remark #15389: vectorization support: reference subnam has unaligned access   [ ilaenv.f(216,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 15.750 
   remark #15478: estimated potential speedup: 0.910 
   remark #15479: lightweight vector operations: 37 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25436: completely unrolled by 5  
LOOP END
===========================================================================

Begin optimization report for: DGTCON

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgtcon.f(215,10)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at dgtcon.f(229,15)
   remark #15529: loop was not vectorized: volatile assignment was not vectorized. Try using non-volatile assignment.   [ dgttrs.f(138,18) ]
LOOP END
===========================================================================

Begin optimization report for: DLANGT

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlangt.f(151,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between anorm line 157 and anorm line 152
   remark #15346: vector dependence: assumed ANTI dependence between anorm line 152 and anorm line 157
   remark #15346: vector dependence: assumed FLOW dependence between anorm line 155 and anorm line 152
   remark #15346: vector dependence: assumed ANTI dependence between anorm line 152 and anorm line 155
   remark #15346: vector dependence: assumed FLOW dependence between anorm line 153 and anorm line 152
   remark #15346: vector dependence: assumed ANTI dependence between anorm line 152 and anorm line 153
   remark #15346: vector dependence: assumed ANTI dependence between anorm line 152 and anorm line 153
   remark #15346: vector dependence: assumed ANTI dependence between anorm line 152 and anorm line 155
   remark #15346: vector dependence: assumed ANTI dependence between anorm line 152 and anorm line 157
LOOP END

LOOP BEGIN at dlangt.f(184,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between anorm line 186 and anorm line 186
   remark #15346: vector dependence: assumed ANTI dependence between anorm line 186 and anorm line 186
   remark #15346: vector dependence: assumed ANTI dependence between anorm line 186 and anorm line 186
LOOP END

LOOP BEGIN at dlassq.f(139,13) inlined into dlangt.f(195,15)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
LOOP END

LOOP BEGIN at dlassq.f(139,13) inlined into dlangt.f(197,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
LOOP END

LOOP BEGIN at dlassq.f(139,13) inlined into dlangt.f(198,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
   remark #15346: vector dependence: assumed FLOW dependence between scale line 144 and scale line 142
   remark #15346: vector dependence: assumed ANTI dependence between scale line 142 and scale line 144
LOOP END

LOOP BEGIN at dlangt.f(169,16)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between anorm line 171 and anorm line 171
   remark #15346: vector dependence: assumed ANTI dependence between anorm line 171 and anorm line 171
   remark #15346: vector dependence: assumed ANTI dependence between anorm line 171 and anorm line 171
LOOP END
===========================================================================

Begin optimization report for: DGTSV

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgtsv.f(177,13)
   remark #15520: loop was not vectorized: loop with early exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at dgtsv.f(234,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgtsv.f(242,22)
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15460: masked strided loads: 2 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 9 
      remark #15477: vector loop cost: 26.000 
      remark #15478: estimated potential speedup: 1.370 
      remark #15479: lightweight vector operations: 5 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgtsv.f(242,22)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgtsv.f(261,19)
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15460: masked strided loads: 3 
      remark #15462: unmasked indexed (or gather) loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 16 
      remark #15477: vector loop cost: 50.000 
      remark #15478: estimated potential speedup: 1.270 
      remark #15479: lightweight vector operations: 10 
      remark #15480: medium-overhead vector operations: 3 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgtsv.f(261,19)
   <Remainder>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgtsv.f(261,19)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgtsv.f(274,22)
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 9 
   remark #15477: vector loop cost: 26.000 
   remark #15478: estimated potential speedup: 1.370 
   remark #15479: lightweight vector operations: 5 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtsv.f(274,22)
<Remainder>
LOOP END

LOOP BEGIN at dgtsv.f(287,19)
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 3 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 16 
   remark #15477: vector loop cost: 50.000 
   remark #15478: estimated potential speedup: 1.270 
   remark #15479: lightweight vector operations: 10 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dgtsv.f(287,19)
<Remainder>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at dgtsv.f(287,19)
<Remainder>
LOOP END

LOOP BEGIN at dgtsv.f(303,10)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form.

   LOOP BEGIN at dgtsv.f(308,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between b line 309 and b line 309
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END
LOOP END

LOOP BEGIN at dgtsv.f(317,13)
   remark #15301: OUTER LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 6 
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 126 
   remark #15477: vector loop cost: 47.250 
   remark #15478: estimated potential speedup: 2.660 
   remark #15479: lightweight vector operations: 27 
   remark #15481: heavy-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---

   LOOP BEGIN at dgtsv.f(322,16)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between b line 323 and b line 323
   LOOP END
LOOP END

LOOP BEGIN at dgtsv.f(317,13)
<Remainder>

   LOOP BEGIN at dgtsv.f(322,16)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DGTTRS

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgttrs.f(214,13)
   remark #15382: vectorization support: call to function DGTTS2 cannot be vectorized   [ dgttrs.f(216,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between jb line 215 and jb line 216
   remark #15346: vector dependence: assumed OUTPUT dependence between jb line 216 and jb line 215
LOOP END
===========================================================================

Begin optimization report for: DLACPY

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlacpy.f(134,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlacpy.f(135,16)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dlacpy.f(135,16)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at dlacpy.f(135,16)
      <Multiversioned v2>
         remark #15388: vectorization support: reference b has aligned access   [ dlacpy.f(136,16) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dlacpy.f(136,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 1.720 
         remark #15479: lightweight vector operations: 2 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dlacpy.f(135,16)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dlacpy.f(140,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlacpy.f(141,16)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dlacpy.f(141,16)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at dlacpy.f(141,16)
      <Multiversioned v2>
         remark #15388: vectorization support: reference b has aligned access   [ dlacpy.f(142,16) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dlacpy.f(142,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 1.720 
         remark #15479: lightweight vector operations: 2 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dlacpy.f(141,16)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dlacpy.f(146,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dlacpy.f(147,16)
      remark #25401: memcopy(with guard) generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dlacpy.f(147,16)
      <Peeled, Multiversioned v2>
      LOOP END

      LOOP BEGIN at dlacpy.f(147,16)
      <Multiversioned v2>
         remark #15388: vectorization support: reference b has aligned access   [ dlacpy.f(148,16) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dlacpy.f(148,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 2.250 
         remark #15478: estimated potential speedup: 1.720 
         remark #15479: lightweight vector operations: 2 
         remark #15480: medium-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dlacpy.f(147,16)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DCOPY

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dcopy.f(84,13)
   remark #25401: memcopy(with guard) generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=6

   LOOP BEGIN at dcopy.f(84,13)
   <Multiversioned v2>
      remark #15389: vectorization support: reference dy has unaligned access   [ dcopy.f(85,16) ]
      remark #15389: vectorization support: reference dx has unaligned access   [ dcopy.f(85,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 4.000 
      remark #15478: estimated potential speedup: 0.800 
      remark #15479: lightweight vector operations: 1 
      remark #15480: medium-overhead vector operations: 1 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
      remark #25439: unrolled with remainder by 2  
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at dcopy.f(84,13)
   <Remainder, Multiversioned v2>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(90,10)
   remark #25264: Loop rerolled by 7 
   remark #25402: memmove generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dcopy.f(90,10)
   <Peeled, Multiversioned v2>
   LOOP END

   LOOP BEGIN at dcopy.f(90,10)
   <Multiversioned v2>
      remark #15388: vectorization support: reference dy has aligned access   [ dcopy.f(91,13) ]
      remark #15389: vectorization support: reference dx has unaligned access   [ dcopy.f(91,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 4 
      remark #15477: vector loop cost: 2.250 
      remark #15478: estimated potential speedup: 1.720 
      remark #15479: lightweight vector operations: 2 
      remark #15480: medium-overhead vector operations: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dcopy.f(90,10)
   <Remainder, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at dcopy.f(108,10)
<Multiversioned v1>
   remark #25235: Loop multiversioned to eliminate assumed dependencies
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 10.000 
   remark #15478: estimated potential speedup: 1.580 
   remark #15479: lightweight vector operations: 1 
   remark #15480: medium-overhead vector operations: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dcopy.f(108,10)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at dcopy.f(108,10)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 4 
   remark #15477: vector loop cost: 3.500 
   remark #15478: estimated potential speedup: 1.130 
   remark #15479: lightweight vector operations: 1 
   remark #15480: medium-overhead vector operations: 1 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dcopy.f(108,10)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: DLASSQ

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dlassq.f(139,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between sumsq line 143 and sumsq line 146
   remark #15346: vector dependence: assumed OUTPUT dependence between sumsq line 146 and sumsq line 143
LOOP END
===========================================================================

Begin optimization report for: IDAMAX

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at idamax.f(84,10)
   remark #15385: vectorization support: unsupported reduction    [ idamax.f(85,28) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(85,28) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at idamax.f(84,10)
<Remainder>
LOOP END

LOOP BEGIN at idamax.f(97,10)
   remark #15385: vectorization support: unsupported reduction    [ idamax.f(98,29) ]
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ idamax.f(98,29) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at idamax.f(97,10)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: DASUM

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dasum.f(86,13)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(87,16) ]
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=5
LOOP END

LOOP BEGIN at dasum.f(86,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=5
LOOP END

LOOP BEGIN at dasum.f(95,10)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(96,13) ]
LOOP END

LOOP BEGIN at dasum.f(105,10)
   remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dasum.f(106,13) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dasum.f(105,10)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: ILAENV

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at ilaenv.f(213,16)
   remark #15389: vectorization support: reference subnam has unaligned access   [ ilaenv.f(214,16) ]
   remark #15389: vectorization support: reference subnam has unaligned access   [ ilaenv.f(216,19) ]
   remark #15389: vectorization support: reference subnam has unaligned access   [ ilaenv.f(216,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 22 
   remark #15477: vector loop cost: 15.750 
   remark #15478: estimated potential speedup: 0.910 
   remark #15479: lightweight vector operations: 37 
   remark #15487: type converts: 1 
   remark #15488: --- end vector loop cost summary ---
   remark #25436: completely unrolled by 5  
LOOP END
===========================================================================

Begin optimization report for: DGEMM

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dgemm.f(281,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(282,22)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(282,22)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(282,22)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(283,23) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(282,22)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(287,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(288,22)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(289,23) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(288,22)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(303,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(305,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(305,26)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(305,26)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(306,27) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(305,26)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(310,27) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(309,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgemm.f(313,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(316,30)
      <Peeled>
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(317,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
      <Remainder>
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(317,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(317,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dgemm.f(316,30)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(326,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(327,22)
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(333,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(335,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(335,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15479: lightweight vector operations: 27 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at dgemm.f(329,26)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemm.f(330,27) ]
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(327,22)
   <Remainder>

      LOOP BEGIN at dgemm.f(329,26)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(345,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(347,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(347,26)
      <Peeled>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END

      LOOP BEGIN at dgemm.f(347,26)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(348,27) ]
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 4 
         remark #15477: vector loop cost: 1.500 
         remark #15478: estimated potential speedup: 1.500 
         remark #15479: lightweight vector operations: 3 
         remark #15488: --- end vector loop cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dgemm.f(347,26)
      <Remainder>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Peeled>
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 5.000 
      remark #15478: estimated potential speedup: 4.040 
      remark #15479: lightweight vector operations: 5 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Remainder>
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(352,27) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at dgemm.f(351,26)
   <Remainder>
   LOOP END

   LOOP BEGIN at dgemm.f(355,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dgemm.f(358,30)
      <Peeled>
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(359,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 9 
         remark #15477: vector loop cost: 13.000 
         remark #15478: estimated potential speedup: 2.540 
         remark #15479: lightweight vector operations: 7 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
      <Remainder>
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15388: vectorization support: reference c has aligned access   [ dgemm.f(359,31) ]
         remark #15389: vectorization support: reference a has unaligned access   [ dgemm.f(359,31) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at dgemm.f(358,30)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dgemm.f(368,18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dgemm.f(369,22)
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(375,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(377,27) ]
      remark #15389: vectorization support: reference c has unaligned access   [ dgemm.f(377,27) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OUTER LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15460: masked strided loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 44 
      remark #15477: vector loop cost: 14.000 
      remark #15478: estimated potential speedup: 3.120 
      remark #15479: lightweight vector operations: 27 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at dgemm.f(371,26)
         remark #15331: loop was not vectorized: precise FP model implied by the command line or a directive prevents vectorization. Consider using fast FP model   [ dgemm.f(372,27) ]
      LOOP END
   LOOP END

   LOOP BEGIN at dgemm.f(369,22)
   <Remainder>

      LOOP BEGIN at dgemm.f(371,26)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DSWAP

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at dswap.f(85,13)
   remark #15389: vectorization support: reference dx has unaligned access   [ dswap.f(86,16) ]
   remark #15389: vectorization support: reference dx has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference dy has unaligned access   [ dswap.f(87,16) ]
   remark #15389: vectorization support: reference dy has unaligned access   [ dswap.f(88,16) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15315: loop was not vectorized: low trip count
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 11 
   remark #15477: vector loop cost: 9.500 
   remark #15478: estimated potential speedup: 0.680 
   remark #15479: lightweight vector operations: 6 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(85,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=2
LOOP END

LOOP BEGIN at dswap.f(93,10)
   remark #25427: Loop Statements Reordered
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15460: masked strided loads: 6 
   remark #15462: unmasked indexed (or gather) loads: 6 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 32 
   remark #15477: vector loop cost: 40.500 
   remark #15478: estimated potential speedup: 0.780 
   remark #15479: lightweight vector operations: 24 
   remark #15480: medium-overhead vector operations: 3 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at dswap.f(113,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between dx line 114 and dx line 115
   remark #15346: vector dependence: assumed FLOW dependence between dx line 115 and dx line 114
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at dswap.f(113,10)
<Remainder>
LOOP END
===========================================================================
